import os, logging, re, random, datetime as dt, asyncio, atexit, hashlib, urllib.parse as _up
from typing import Optional, List, Tuple, Dict, Any
from zoneinfo import ZoneInfo

from sqlalchemy import select, text, Integer, BigInteger, String, DateTime, Date, Boolean, JSON, ForeignKey, Index
from sqlalchemy.orm import sessionmaker, declarative_base, Mapped, mapped_column
from sqlalchemy import create_engine

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application, MessageHandler, CallbackQueryHandler, ChatMemberHandler,
    CommandHandler, filters, ContextTypes
)
from telegram.error import Conflict as TgConflict

# ================== CONFIG ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
DEFAULT_TZ = os.getenv("DEFAULT_TZ", "Asia/Tehran")
OWNER_CONTACT_USERNAME = os.getenv("OWNER_CONTACT", "soulsownerbot")
AUTO_DELETE_SECONDS = int(os.getenv("AUTO_DELETE_SECONDS", "40"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()
PORT = int(os.getenv("PORT", "8080"))

Base = declarative_base()

# Persian dates
try:
    from persiantools.jdatetime import JalaliDateTime, JalaliDate
    from persiantools import digits as _digits
    HAS_PTOOLS = True
except Exception:
    HAS_PTOOLS = False

def fa_digits(x: str) -> str:
    s = str(x)
    if HAS_PTOOLS:
        try: return _digits.en_to_fa(s)
        except Exception: return s
    return s

def fmt_dt_fa(dt_utc: Optional[dt.datetime], tz_name: Optional[str] = None) -> str:
    if dt_utc is None: return "-"
    tz = ZoneInfo(tz_name or DEFAULT_TZ)
    if dt_utc.tzinfo is None: dt_utc = dt_utc.replace(tzinfo=ZoneInfo("UTC"))
    local = dt_utc.astimezone(tz)
    if HAS_PTOOLS:
        try:
            jdt = JalaliDateTime.fromgregorian(datetime=local)
            # ŸÜÿßŸÖ ÿ±Ÿàÿ≤ + ÿ™ÿßÿ±€åÿÆ Ÿà ÿ≥ÿßÿπÿ™
            s = jdt.strftime("%A %Y/%m/%d %H:%M")
            return fa_digits(s) + " (ÿ™Ÿáÿ±ÿßŸÜ)"
        except Exception: ...
    return local.strftime("%Y/%m/%d %H:%M") + " (Tehran)"

def fmt_date_fa(d: Optional[dt.date]) -> str:
    if not d: return "-"
    if HAS_PTOOLS:
        try:
            jd = JalaliDate.fromgregorian(date=d)
            return fa_digits(jd.strftime("%Y/%m/%d"))
        except Exception: ...
    return d.strftime("%Y/%m/%d")

def today_jalali(tz: ZoneInfo) -> Tuple[int,int,int]:
    now = dt.datetime.now(tz)
    if HAS_PTOOLS:
        j = JalaliDateTime.fromgregorian(datetime=now)
        return j.year, j.month, j.day
    d = now.date()
    return d.year, d.month, d.day

def to_jalali_md(d: dt.date) -> Tuple[int,int]:
    if HAS_PTOOLS:
        j = JalaliDate.fromgregorian(date=d)
        return j.month, j.day
    return d.month, d.day

def footer(text: str) -> str:
    return f"{text}\n\n‚Äî ÿ≥ÿßÿÆÿ™Ÿá ÿ¥ÿØŸá ÿ™Ÿàÿ≥ÿ∑ ÿ™€åŸÖ souls"

def contact_kb(extra_rows: List[List[InlineKeyboardButton]]|None=None, bot_username: Optional[str]=None) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    if extra_rows: rows.extend(extra_rows)
    rows.append([InlineKeyboardButton("üìû ÿ™ŸÖÿßÿ≥ ÿ®ÿß ŸÖÿßŸÑ⁄©", url=f"https://t.me/{OWNER_CONTACT_USERNAME}")])
    if bot_username:
        rows.append([InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá", url=f"https://t.me/{bot_username}?startgroup=true")])
    return InlineKeyboardMarkup(rows)

# ================== Auto-Delete ==================
async def _job_delete_message(context: ContextTypes.DEFAULT_TYPE):
    chat_id, msg_id = context.job.data
    try:
        await context.bot.delete_message(chat_id, msg_id)
    except Exception: ...

def schedule_autodelete(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, keep: bool=False):
    if keep: return
    jq = context.application.job_queue if hasattr(context, "application") else None
    if jq: jq.run_once(_job_delete_message, when=AUTO_DELETE_SECONDS, data=(chat_id, message_id))

async def reply_temp(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                     reply_markup: InlineKeyboardMarkup|None=None, keep: bool=False,
                     parse_mode: Optional[str]=None, reply_to_message_id: Optional[int]=None, with_footer: bool=True):
    msg = await update.effective_chat.send_message(
        footer(text) if with_footer else text,
        reply_markup=reply_markup, parse_mode=parse_mode, reply_to_message_id=reply_to_message_id
    )
    schedule_autodelete(context, msg.chat_id, msg.message_id, keep=keep)
    return msg

# ================== DB URL ==================
def _mask_url(u: str) -> str:
    try:
        parts = _up.urlsplit(u)
        if parts.username or parts.password:
            netloc = parts.hostname or ""
            if parts.port: netloc += f":{parts.port}"
            return _up.urlunsplit((parts.scheme, netloc, parts.path, parts.query, parts.fragment))
    except Exception: ...
    return "<unparsable>"

_DRIVER = None
try:
    import psycopg; _DRIVER = "psycopg"
except Exception:
    try:
        import psycopg2; _DRIVER = "psycopg2"
    except Exception:
        _DRIVER = "psycopg"

raw_db_url = (os.getenv("DATABASE_URL") or "").strip()
if not raw_db_url:
    PGHOST = os.getenv("PGHOST"); PGPORT = os.getenv("PGPORT", "5432")
    PGUSER = os.getenv("PGUSER"); PGPASSWORD = os.getenv("PGPASSWORD")
    PGDATABASE = os.getenv("PGDATABASE", "railway")
    if all([PGHOST, PGUSER, PGPASSWORD]):
        raw_db_url = f"postgresql://{PGUSER}:{PGPASSWORD}@{PGHOST}:{PGPORT}/{PGDATABASE}"
    else:
        raise RuntimeError("DATABASE_URL €åÿßŸÅÿ™ ŸÜÿ¥ÿØ Ÿà ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å PGHOST/PGUSER/PGPASSWORD ŸáŸÖ ÿ≥ÿ™ ŸÜ€åÿ≥ÿ™ŸÜÿØ.")

db_url = raw_db_url
if db_url.startswith("postgres://"): db_url = db_url.replace("postgres://", "postgresql://", 1)
if "+psycopg" not in db_url and "+psycopg2" not in db_url:
    db_url = db_url.replace("postgresql://", f"postgresql+{_DRIVER}://", 1)
if "sslmode=" not in db_url:
    sep = "&" if "?" in db_url else "?"
    db_url = f"{db_url}{sep}sslmode=require"

try:
    parsed = _up.urlsplit(db_url)
    logging.info(f"DB host: {parsed.hostname}, port: {parsed.port}, db: {parsed.path}")
except Exception:
    pass

engine = create_engine(db_url, pool_pre_ping=True, future=True, connect_args={"sslmode":"require"})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False, future=True)

# --- Singleton guard (polling only one instance) ---
SINGLETON_CONN = None
def acquire_singleton_or_exit():
    global SINGLETON_CONN
    key = int(hashlib.blake2b(TOKEN.encode(), digest_size=8).hexdigest(), 16) % (2**31)
    try:
        SINGLETON_CONN = engine.raw_connection()
        cur = SINGLETON_CONN.cursor()
        cur.execute("SELECT pg_try_advisory_lock(%s)", (key,))
        ok = cur.fetchone()[0]
        if not ok:
            logging.error("Another instance is already running (PG advisory lock). Exiting.")
            os._exit(0)
        logging.info("Singleton advisory lock acquired. This is the only polling instance.")
    except Exception as e:
        logging.error(f"Singleton lock failed: {e}")
        os._exit(0)

    @atexit.register
    def _unlock():
        try:
            cur = SINGLETON_CONN.cursor()
            cur.execute("SELECT pg_advisory_unlock(%s)", (key,))
            SINGLETON_CONN.close()
        except Exception:
            pass

# ================== MODELS ==================
class Group(Base):
    __tablename__ = "groups"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    title: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    owner_user_id: Mapped[Optional[int]] = mapped_column(BigInteger, nullable=True)
    timezone: Mapped[Optional[str]] = mapped_column(String(64), nullable=True)
    trial_started_at: Mapped[Optional[dt.datetime]] = mapped_column(DateTime, nullable=True)
    expires_at: Mapped[Optional[dt.datetime]] = mapped_column(DateTime, nullable=True)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    settings: Mapped[Optional[dict]] = mapped_column(JSON, nullable=True)

class User(Base):
    __tablename__ = "users"
    __table_args__ = (
        Index("ix_users_chat_username", "chat_id", "username"),
        Index("ix_users_chat_tg", "chat_id", "tg_user_id", unique=True),
    )
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    tg_user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    first_name: Mapped[Optional[str]] = mapped_column(String(128))
    last_name: Mapped[Optional[str]] = mapped_column(String(128))
    username: Mapped[Optional[str]] = mapped_column(String(128), index=True)
    gender: Mapped[str] = mapped_column(String(8), default="unknown")
    birthday: Mapped[Optional[dt.date]] = mapped_column(Date, nullable=True)

class GroupAdmin(Base):
    __tablename__ = "group_admins"
    __table_args__ = (Index("ix_ga_unique", "chat_id", "tg_user_id", unique=True),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    tg_user_id: Mapped[int] = mapped_column(BigInteger, index=True)

class Relationship(Base):
    __tablename__ = "relationships"
    __table_args__ = (Index("ix_rel_unique", "chat_id", "user_a_id", "user_b_id", unique=True),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    user_a_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    user_b_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    started_at: Mapped[Optional[dt.date]] = mapped_column(Date, nullable=True)

class Crush(Base):
    __tablename__ = "crushes"
    __table_args__ = (Index("ix_crush_unique", "chat_id", "from_user_id", "to_user_id", unique=True),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    from_user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    to_user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    created_at: Mapped[dt.datetime] = mapped_column(DateTime, default=dt.datetime.utcnow)

class ReplyStatDaily(Base):
    __tablename__ = "reply_stat_daily"
    __table_args__ = (Index("ix_reply_chat_date_user", "chat_id", "date", "target_user_id", unique=True),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    date: Mapped[dt.date] = mapped_column(Date, index=True)
    target_user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    reply_count: Mapped[int] = mapped_column(Integer, default=0)

class ShipHistory(Base):
    __tablename__ = "ship_history"
    __table_args__ = (Index("ix_ship_chat_date", "chat_id", "date"),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    date: Mapped[dt.date] = mapped_column(Date, index=True)
    male_user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    female_user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))

class SubscriptionLog(Base):
    __tablename__ = "subscription_log"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    chat_id: Mapped[int] = mapped_column(BigInteger, index=True)
    actor_tg_user_id: Mapped[Optional[int]] = mapped_column(BigInteger, nullable=True)
    action: Mapped[str] = mapped_column(String(32))
    amount_days: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)
    created_at: Mapped[dt.datetime] = mapped_column(DateTime, default=dt.datetime.utcnow)

class Seller(Base):
    __tablename__ = "sellers"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_user_id: Mapped[int] = mapped_column(BigInteger, unique=True, index=True)
    note: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)

Base.metadata.create_all(bind=engine)
with engine.begin() as conn:
    conn.execute(text("""
        CREATE UNIQUE INDEX IF NOT EXISTS ix_rel_unique ON relationships (chat_id, user_a_id, user_b_id);
        CREATE UNIQUE INDEX IF NOT EXISTS ix_crush_unique ON crushes (chat_id, from_user_id, to_user_id);
        CREATE UNIQUE INDEX IF NOT EXISTS ix_reply_chat_date_user ON reply_stat_daily (chat_id, date, target_user_id);
        CREATE INDEX IF NOT EXISTS ix_users_chat_username ON users (chat_id, username);
        CREATE UNIQUE INDEX IF NOT EXISTS ix_users_chat_tg ON users (chat_id, tg_user_id);
        CREATE INDEX IF NOT EXISTS ix_ship_chat_date ON ship_history (chat_id, date);
        CREATE UNIQUE INDEX IF NOT EXISTS ix_ga_unique ON group_admins (chat_id, tg_user_id);
    """))

# ================== HELPERS ==================
def try_send_owner(text_msg: str):
    from telegram import Bot
    if not TOKEN or not OWNER_ID: return
    try: Bot(TOKEN).send_message(OWNER_ID, footer(text_msg))
    except Exception as e: logging.info(f"Owner DM failed: {e}")

def ensure_group(session, chat) -> 'Group':
    g = session.get(Group, chat.id)
    if not g:
        g = Group(
            id=chat.id, title=getattr(chat, "title", None) or str(chat.id),
            owner_user_id=None, timezone=DEFAULT_TZ,
            trial_started_at=dt.datetime.utcnow(),
            expires_at=dt.datetime.utcnow() + dt.timedelta(days=7),
            is_active=True, settings={}
        )
        session.add(g)
        session.add(SubscriptionLog(chat_id=chat.id, actor_tg_user_id=None, action="trial_start", amount_days=7))
        session.commit()
        try_send_owner(f"‚ûï ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá ÿ¨ÿØ€åÿØ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ:\n‚Ä¢ {g.title}\n‚Ä¢ chat_id: {g.id}\n‚Ä¢ ŸæŸÑŸÜ: €∑ ÿ±Ÿàÿ≤ ÿ±ÿß€å⁄ØÿßŸÜ ŸÅÿπÿßŸÑ ÿ¥ÿØ.")
    return g

def upsert_user(session, chat_id, tg_user) -> 'User':
    u = session.execute(select(User).where(User.chat_id==chat_id, User.tg_user_id==tg_user.id)).scalar_one_or_none()
    if not u:
        u = User(chat_id=chat_id, tg_user_id=tg_user.id,
                 first_name=tg_user.first_name, last_name=tg_user.last_name,
                 username=tg_user.username, gender="unknown")
        session.add(u); session.commit()
    else:
        changed = False
        if u.first_name != tg_user.first_name: u.first_name = tg_user.first_name; changed = True
        if u.last_name != tg_user.last_name: u.last_name = tg_user.last_name; changed = True
        if u.username != tg_user.username: u.username = tg_user.username; changed = True
        if changed: session.commit()
    return u

def is_seller(session, tg_user_id: int) -> bool:
    s = session.execute(select(Seller).where(Seller.tg_user_id==tg_user_id, Seller.is_active==True)).scalar_one_or_none()
    return bool(s)

def is_group_admin(session, chat_id: int, tg_user_id: int) -> bool:
    if tg_user_id == OWNER_ID: return True
    g = session.get(Group, chat_id)
    blocked = (g.settings or {}).get("blocked_sellers", []) if g else []
    if is_seller(session, tg_user_id) and tg_user_id not in blocked: return True
    row = session.execute(select(GroupAdmin).where(
        (GroupAdmin.chat_id==chat_id) & (GroupAdmin.tg_user_id==tg_user_id)
    )).scalar_one_or_none()
    return bool(row)

def group_active(g: Group) -> bool:
    return bool(g.expires_at and g.expires_at > dt.datetime.utcnow())

def clean_text(s: str) -> str: return re.sub(r"\s+", " ", s.strip())
def chunked(lst: List, n: int):
    for i in range(0, len(lst), n): yield lst[i:i+n]
def mention_of(u: 'User') -> str:
    if u.username: return f"@{u.username}"
    name = u.first_name or "⁄©ÿßÿ±ÿ®ÿ±"
    return f'<a href="tg://user?id={u.tg_user_id}">{name}</a>'

# ================== STATE: panels & patterns ==================
PANELS: Dict[Tuple[int,int], Dict[str, Any]] = {}  # (chat_id, message_id) -> {"owner": tg_user_id}

def add_nav(rows: List[List[InlineKeyboardButton]], root: bool=False) -> InlineKeyboardMarkup:
    nav = [InlineKeyboardButton("‚úñÔ∏è ÿ®ÿ≥ÿ™ŸÜ", callback_data="nav:close")]
    if not root:
        nav.insert(0, InlineKeyboardButton("‚¨ÖÔ∏è ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="nav:back"))
    return InlineKeyboardMarkup([nav] + rows)

async def open_panel_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE, title: str, rows: List[List[InlineKeyboardButton]], root: bool, keep: bool=True):
    msg = await update.effective_chat.send_message(footer(title), reply_markup=add_nav(rows, root=root))
    PANELS[(msg.chat_id, msg.message_id)] = {"owner": update.effective_user.id}
    if keep:  # ŸæŸÜŸÑ ÿ™ÿß ÿ≤ŸÖÿßŸÜ ÿ®ÿ≥ÿ™ŸÜ ŸÖ€å‚ÄåŸÖÿßŸÜÿØ
        pass
    else:
        schedule_autodelete(context, msg.chat_id, msg.message_id, keep=False)
    return msg

async def open_panel_from_cb(qmsg, qfrom_id: int, context: ContextTypes.DEFAULT_TYPE, title: str, rows: List[List[InlineKeyboardButton]], root: bool):
    msg = await qmsg.chat.send_message(footer(title), reply_markup=add_nav(rows, root=root))
    PANELS[(msg.chat.id, msg.message_id)] = {"owner": qfrom_id}
    return msg

def kb_group_menu(is_group_admin_flag: bool) -> List[List[InlineKeyboardButton]]:
    rows = [
        [InlineKeyboardButton("üë§ ÿ´ÿ®ÿ™ ÿ¨ŸÜÿ≥€åÿ™", callback_data="ui:gset")],
        [InlineKeyboardButton("üéÇ ÿ´ÿ®ÿ™ ÿ™ŸàŸÑÿØ", callback_data="ui:bd:start")],
        [InlineKeyboardButton("üíò ÿ´ÿ®ÿ™ ⁄©ÿ±ÿßÿ¥ (ÿ±€åŸæŸÑÿß€å)", callback_data="ui:crush:add"),
         InlineKeyboardButton("üóëÔ∏è ÿ≠ÿ∞ŸÅ ⁄©ÿ±ÿßÿ¥", callback_data="ui:crush:del")],
        [InlineKeyboardButton("üíû ÿ´ÿ®ÿ™ ÿ±ÿßÿ®ÿ∑Ÿá (ÿ±€åŸæŸÑÿß€å)", callback_data="ui:rel:add"),
         InlineKeyboardButton("üóëÔ∏è ÿ≠ÿ∞ŸÅ ÿ±ÿßÿ®ÿ∑Ÿá", callback_data="ui:rel:del")],
        [InlineKeyboardButton("üëë ŸÖÿ≠ÿ®Ÿàÿ® ÿßŸÖÿ±Ÿàÿ≤", callback_data="ui:pop"),
         InlineKeyboardButton("üí´ ÿ¥€åŸæ ÿßŸÖÿ¥ÿ®", callback_data="ui:ship")],
        [InlineKeyboardButton("üè∑Ô∏è ÿ™⁄Ø ÿØÿÆÿ™ÿ±Ÿáÿß", callback_data="ui:tag:girls"),
         InlineKeyboardButton("üè∑Ô∏è ÿ™⁄Ø Ÿæÿ≥ÿ±Ÿáÿß", callback_data="ui:tag:boys")],
        [InlineKeyboardButton("üè∑Ô∏è ÿ™⁄Ø ŸáŸÖŸá", callback_data="ui:tag:all")],
        [InlineKeyboardButton("üîê ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="ui:privacy:me"),
         InlineKeyboardButton("üóëÔ∏è ÿ≠ÿ∞ŸÅ ŸÖŸÜ", callback_data="ui:privacy:delme")],
    ]
    if is_group_admin_flag:
        rows.append([InlineKeyboardButton("‚öôÔ∏è Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ŸÅÿ∂ŸàŸÑ", callback_data="cfg:open")])
    return rows

def kb_config(chat_id: int, bot_username: str) -> List[List[InlineKeyboardButton]]:
    return [
        [InlineKeyboardButton("‚ö°Ô∏è ÿ¥ÿßÿ±⁄ò ⁄Øÿ±ŸàŸá", callback_data="ui:charge:open")],
        [InlineKeyboardButton("üë• ŸÖÿØ€åÿ±ÿßŸÜ ⁄Øÿ±ŸàŸá", callback_data="ga:list")],
        [InlineKeyboardButton("‚è± ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿß€åŸÖ‚Äåÿ≤ŸàŸÜ", callback_data="tz:menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è ŸÖÿ¥ÿßŸáÿØŸá ÿßŸÜŸÇÿ∂ÿß", callback_data="ui:expiry")],
        [InlineKeyboardButton("üö™ ÿÆÿ±Ÿàÿ¨ ÿ±ÿ®ÿßÿ™", callback_data=f"grp:{chat_id}:leave")],
        [InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá", url=f"https://t.me/{bot_username}?startgroup=true")],
        [InlineKeyboardButton("üßπ Ÿæÿß⁄©ÿ≥ÿßÿ≤€å ⁄Øÿ±ŸàŸá", callback_data=f"wipe:{chat_id}")],
    ]

# ================== PATTERNS ==================
PAT_GROUP = {
    "menu": re.compile(r"^(?:ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà|ŸÖŸÜŸà)$"),
    "help": re.compile(r"^(?:ŸÅÿ∂ŸàŸÑ ⁄©ŸÖ⁄©|ÿ±ÿßŸáŸÜŸÖÿß|⁄©ŸÖ⁄©)$"),
    "config": re.compile(r"^(?:Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ŸÅÿ∂ŸàŸÑ|ŸÅÿ∂ŸàŸÑ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å|ŸÅÿ∂ŸàŸÑ ÿ™ŸÜÿ∏€åŸÖÿßÿ™|ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ŸÅÿ∂ŸàŸÑ)$"),
    "admin_add": re.compile(r"^ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ(?: @?(\w+))?$"),
    "admin_del": re.compile(r"^ÿ≠ÿ∞ŸÅ ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ(?: @?(\w+))?$"),
    "seller_block": re.compile(r"^(?:ŸÖÿ≥ÿØŸàÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá)(?: @?(\w+))?$"),
    "seller_unblock": re.compile(r"^(?:ÿ¢ÿ≤ÿßÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá)(?: @?(\w+))?$"),
    "gender": re.compile(r"^ÿ´ÿ®ÿ™ ÿ¨ŸÜÿ≥€åÿ™ (ÿØÿÆÿ™ÿ±|Ÿæÿ≥ÿ±)$"),
    "birthday_set": re.compile(r"^ÿ´ÿ®ÿ™ ÿ™ŸàŸÑÿØ (\d{4}-\d{2}-\d{2})$"),
    "birthday_del": re.compile(r"^ÿ≠ÿ∞ŸÅ ÿ™ŸàŸÑÿØ$"),
    "relation_set": re.compile(r"^ÿ´ÿ®ÿ™ ÿ±ÿßÿ®ÿ∑Ÿá @?(\w+)\s+(\d{4}-\d{2}-\d{2})$"),
    "relation_del": re.compile(r"^ÿ≠ÿ∞ŸÅ ÿ±ÿßÿ®ÿ∑Ÿá @?(\w+)$"),
    "crush_add": re.compile(r"^ÿ´ÿ®ÿ™ ⁄©ÿ±ÿßÿ¥$"),
    "crush_del": re.compile(r"^ÿ≠ÿ∞ŸÅ ⁄©ÿ±ÿßÿ¥$"),
    "popular_today": re.compile(r"^ŸÖÿ≠ÿ®Ÿàÿ® ÿßŸÖÿ±Ÿàÿ≤$"),
    "ship_tonight": re.compile(r"^ÿ¥€åŸæ ÿßŸÖÿ¥ÿ®$"),
    "expiry": re.compile(r"^ŸÅÿ∂ŸàŸÑ ÿßŸÜŸÇÿ∂ÿß$"),
    "charge": re.compile(r"^ŸÅÿ∂ŸàŸÑ ÿ¥ÿßÿ±⁄ò$"),
    "tag_girls": re.compile(r"^ÿ™⁄Ø ÿØÿÆÿ™ÿ±Ÿáÿß$"),
    "tag_boys": re.compile(r"^ÿ™⁄Ø Ÿæÿ≥ÿ±Ÿáÿß$"),
    "tag_all": re.compile(r"^ÿ™⁄Ø ŸáŸÖŸá$"),
    "privacy_me": re.compile(r"^ÿ≠ÿ∞ŸÅ ŸÖŸÜ$"),
    "privacy_info": re.compile(r"^(?:ÿØÿßÿØŸá(?:‚Äå| )Ÿáÿß€å ŸÖŸÜ|ÿ≠ÿ±€åŸÖ ÿÆÿµŸàÿµ€å)$"),
    "wipe_group": re.compile(r"^Ÿæÿß⁄©ÿ≥ÿßÿ≤€å ⁄Øÿ±ŸàŸá$"),
}

PAT_DM = {
    "panel": re.compile(r"^(?:ŸæŸÜŸÑ|ŸÖÿØ€åÿ±€åÿ™|⁄©ŸÖ⁄©)$"),
    "groups": re.compile(r"^⁄Øÿ±ŸàŸá‚ÄåŸáÿß$"),
    "manage": re.compile(r"^ŸÖÿØ€åÿ±€åÿ™ (\-?\d+)$"),
    "extend": re.compile(r"^ÿ™ŸÖÿØ€åÿØ (\-?\d+)\s+(\d+)$"),
    "set_tz": re.compile(r"^ÿ™ŸÜÿ∏€åŸÖ ÿ≤ŸÖÿßŸÜ (\-?\d+)\s+([\w\/]+)$"),
    "add_seller": re.compile(r"^ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá (\d+)(?:\s+(.+))?$"),
    "del_seller": re.compile(r"^ÿ≠ÿ∞ŸÅ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá (\d+)$"),
    "list_sellers": re.compile(r"^ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß$"),
}

# ================== /start ==================
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        # ÿ™Ÿàÿ∂€åÿ≠ ⁄©Ÿàÿ™ÿßŸá ÿØÿ± ⁄Øÿ±ŸàŸá
        txt = (
            "ÿ≥ŸÑÿßŸÖ! ÿ®ÿ±ÿß€å ⁄©ÿßÿ± ÿ®ÿß ÿ±ÿ®ÿßÿ™:\n"
            "‚Ä¢ ¬´ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà¬ª ‚Üí ŸÖŸÜŸà€å ÿØ⁄©ŸÖŸá‚Äåÿß€å\n"
            "‚Ä¢ ¬´ŸÅÿ∂ŸàŸÑ ⁄©ŸÖ⁄©¬ª ‚Üí ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßŸÖŸÑ\n"
            "‚Ä¢ ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿ®ÿØŸàŸÜ / Ÿáÿ≥ÿ™ŸÜÿØ."
        )
        await reply_temp(update, context, txt)
        return

    bot_username = context.bot.username
    with SessionLocal() as s:
        uid = update.effective_user.id
        if uid == OWNER_ID:
            txt = (
                "üëë ÿ®Ÿá ŸæŸÜŸÑ ŸÖÿßŸÑ⁄© ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€å!\n"
                "‚Ä¢ ¬´üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß¬ª ÿ®ÿ±ÿß€å ÿ¥ÿßÿ±⁄ò/ÿßŸÜŸÇÿ∂ÿß/ÿÆÿ±Ÿàÿ¨/ÿßŸÅÿ≤ŸàÿØŸÜ\n"
                "‚Ä¢ ¬´üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß¬ª ÿ®ÿ±ÿß€å ÿ¢ŸÖÿßÿ±/ÿπÿ≤ŸÑ/ÿßŸÅÿ≤ŸàÿØŸÜ\n"
                "ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ŸÖÿ™ŸÜ€å ŸÖÿßŸÑ⁄©:\n"
                "‚Ä¢ ¬´ÿ™ŸÖÿØ€åÿØ <chat_id> <days>¬ª\n"
                "‚Ä¢ ¬´ÿ™ŸÜÿ∏€åŸÖ ÿ≤ŸÖÿßŸÜ <chat_id> <Area/City>¬ª\n"
                "‚Ä¢ ¬´ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá <tgid> [€åÿßÿØÿØÿßÿ¥ÿ™]¬ª / ¬´ÿ≠ÿ∞ŸÅ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá <tgid>¬ª"
            )
            await reply_temp(update, context, txt, reply_markup=contact_kb(
                extra_rows=[[InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß", callback_data="adm:groups:0"),
                             InlineKeyboardButton("üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß", callback_data="adm:sellers")]],
                bot_username=bot_username
            ), keep=True)
            return
        elif is_seller(s, uid):
            txt = (
                "üõçÔ∏è ÿ±ÿßŸáŸÜŸÖÿß€å ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá:\n"
                "‚Ä¢ ÿØÿ± ⁄Øÿ±ŸàŸá: ¬´ŸÅÿ∂ŸàŸÑ ÿ¥ÿßÿ±⁄ò¬ª €åÿß ¬´‚öôÔ∏è Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ŸÅÿ∂ŸàŸÑ¬ª\n"
                "‚Ä¢ ÿØÿ± Ÿæ€å‚ÄåŸà€å: ¬´üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß¬ª ‚Üí ÿ¥ÿßÿ±⁄ò €≥€∞/€π€∞/€±€∏€∞\n"
                "‚Ä¢ ÿ®Ÿá ŸÖÿ¥ÿ™ÿ±€å ÿ®⁄ØŸà ÿØÿ± ⁄Øÿ±ŸàŸá ¬´ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà¬ª ÿ®ÿ≤ŸÜŸÜÿØ."
            )
            await reply_temp(update, context, txt, reply_markup=contact_kb(
                extra_rows=[[InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß", callback_data="adm:groups:0")]],
                bot_username=bot_username
            ), keep=True)
            return
        else:
            txt = (
                "ÿ≥ŸÑÿßŸÖ! üëã ÿß€åŸÜ ÿ±ÿ®ÿßÿ™ ÿ®ÿ±ÿß€å ⁄Øÿ±ŸàŸá‚ÄåŸáÿßÿ≥ÿ™.\n"
                "‚ûï ÿ®ÿß ÿØ⁄©ŸÖŸáŸî ÿ≤€åÿ± ÿ±ÿ®ÿßÿ™ ÿ±ÿß ÿ®Ÿá ⁄Øÿ±ŸàŸá ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ Ÿà €∑ ÿ±Ÿàÿ≤ ÿ±ÿß€å⁄ØÿßŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ.\n"
                "ÿØÿ± ⁄Øÿ±ŸàŸá ¬´ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà¬ª ÿ±ÿß ÿ®ÿ≤ŸÜ ÿ™ÿß ŸáŸÖŸá‚Äå⁄Ü€åÿ≤ ÿ®ÿß ÿØ⁄©ŸÖŸá ÿßŸÜÿ¨ÿßŸÖ ÿ¥ŸàÿØ."
            )
            await reply_temp(update, context, txt, reply_markup=contact_kb(
                extra_rows=[[InlineKeyboardButton("üß≠ ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßÿ±ÿ®ÿ±", callback_data="usr:help")]],
                bot_username=bot_username
            ), keep=True)
            return

# ================== GROUP TEXT ==================
def user_help_text() -> str:
    return (
        "üìò ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßŸÖŸÑ ⁄©ÿßÿ±ÿ®ÿ±:\n"
        "‚Ä¢ ¬´ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà¬ª ‚Üí ŸÖŸÜŸà€å ÿØ⁄©ŸÖŸá‚Äåÿß€å\n"
        "‚Ä¢ ¬´ÿ´ÿ®ÿ™ ÿ¨ŸÜÿ≥€åÿ™ ÿØÿÆÿ™ÿ±/Ÿæÿ≥ÿ±¬ª\n"
        "‚Ä¢ ¬´üéÇ ÿ´ÿ®ÿ™ ÿ™ŸàŸÑÿØ YYYY-MM-DD¬ª / ¬´ÿ≠ÿ∞ŸÅ ÿ™ŸàŸÑÿØ¬ª\n"
        "‚Ä¢ ¬´ÿ´ÿ®ÿ™ ⁄©ÿ±ÿßÿ¥¬ª (ÿ±Ÿà€å Ÿæ€åÿßŸÖ ÿ∑ÿ±ŸÅ ÿ±€åŸæŸÑÿß€å) / ¬´ÿ≠ÿ∞ŸÅ ⁄©ÿ±ÿßÿ¥¬ª\n"
        "‚Ä¢ ¬´ÿ´ÿ®ÿ™ ÿ±ÿßÿ®ÿ∑Ÿá @username YYYY-MM-DD¬ª / ¬´ÿ≠ÿ∞ŸÅ ÿ±ÿßÿ®ÿ∑Ÿá @username¬ª\n"
        "‚Ä¢ ¬´ŸÖÿ≠ÿ®Ÿàÿ® ÿßŸÖÿ±Ÿàÿ≤¬ª / ¬´ÿ¥€åŸæ ÿßŸÖÿ¥ÿ®¬ª\n"
        "‚Ä¢ ¬´ÿ™⁄Ø ÿØÿÆÿ™ÿ±Ÿáÿß|Ÿæÿ≥ÿ±Ÿáÿß|ŸáŸÖŸá¬ª (ÿØÿ± ÿ±€åŸæŸÑÿß€å ÿ®Ÿá €å⁄© Ÿæ€åÿßŸÖÿõ Ÿáÿ± Ÿæ€åÿßŸÖ €¥ ŸÜŸÅÿ±)\n"
        "‚Ä¢ ¬´ÿ≠ÿ±€åŸÖ ÿÆÿµŸàÿµ€å¬ª ÿ®ÿ±ÿß€å ÿØ€åÿØŸÜÿå ¬´ÿ≠ÿ∞ŸÅ ŸÖŸÜ¬ª ÿ®ÿ±ÿß€å Ÿæÿß⁄©‚Äå⁄©ÿ±ÿØŸÜ ÿØÿßÿØŸá‚ÄåŸáÿß\n"
        "‚Ä¢ ¬´ŸÅÿ∂ŸàŸÑ ÿ¥ÿßÿ±⁄ò¬ª ŸæŸÜŸÑ ÿ¥ÿßÿ±⁄ò (ŸÅŸÇÿ∑ ŸÖÿØ€åÿ±/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©)\n"
        "‚Ä¢ ¬´ŸÅÿ∂ŸàŸÑ ÿßŸÜŸÇÿ∂ÿß¬ª ŸÜŸÖÿß€åÿ¥ Ÿæÿß€åÿßŸÜ ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá"
    )

async def on_group_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ("group","supergroup") or not update.message or not update.message.text:
        return
    text = clean_text(update.message.text)
    with SessionLocal() as s:
        g = ensure_group(s, update.effective_chat)
        is_gadmin = is_group_admin(s, g.id, update.effective_user.id)

    # ŸÖŸÜŸà
    if PAT_GROUP["menu"].match(text):
        title = "üïπ ŸÖŸÜŸà€å ŸÅÿ∂ŸàŸÑ"
        rows = kb_group_menu(is_gadmin)
        await open_panel_from_text(update, context, title, rows, root=True, keep=True)
        return

    # ÿ±ÿßŸáŸÜŸÖÿß
    if PAT_GROUP["help"].match(text):
        await reply_temp(update, context, user_help_text())
        return

    # Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å
    if PAT_GROUP["config"].match(text):
        with SessionLocal() as s:
            if not is_group_admin(s, update.effective_chat.id, update.effective_user.id):
                await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ."); return
        title = "‚öôÔ∏è Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ŸÅÿ∂ŸàŸÑ"
        rows = kb_config(update.effective_chat.id, context.bot.username)
        await open_panel_from_text(update, context, title, rows, root=True, keep=True)
        return

    # ÿßÿØŸÖ€åŸÜ ÿßÿ∂ÿßŸÅŸá/ÿ≠ÿ∞ŸÅ (ŸÖÿ™ŸÜ€å)
    if PAT_GROUP["admin_add"].match(text) or PAT_GROUP["admin_del"].match(text):
        m_add = PAT_GROUP["admin_add"].match(text)
        m_del = PAT_GROUP["admin_del"].match(text)
        with SessionLocal() as s:
            if not is_group_admin(s, update.effective_chat.id, update.effective_user.id):
                await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ."); return
            target_id = None
            m = m_add or m_del
            if update.message.reply_to_message:
                target_id = update.message.reply_to_message.from_user.id
            elif m and m.group(1):
                uname = m.group(1)
                urow = s.execute(select(User).where(User.chat_id==update.effective_chat.id, User.username==uname)).scalar_one_or_none()
                if urow: target_id = urow.tg_user_id
            if not target_id:
                await reply_temp(update, context, "ÿ±Ÿà€å Ÿæ€åÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ± ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ €åÿß ¬´ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ @username / ÿ≠ÿ∞ŸÅ ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ @username¬ª ÿ®ÿ≤ŸÜ."); return
            if m_add:
                try:
                    s.add(GroupAdmin(chat_id=update.effective_chat.id, tg_user_id=target_id)); s.commit()
                    await reply_temp(update, context, "‚úÖ ÿ®Ÿá‚ÄåÿπŸÜŸàÿßŸÜ ÿßÿØŸÖ€åŸÜ ⁄Øÿ±ŸàŸá ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.")
                except Exception:
                    await reply_temp(update, context, "ŸÇÿ®ŸÑÿßŸã ÿßÿØŸÖ€åŸÜ ÿ®ŸàÿØŸá €åÿß ÿÆÿ∑ÿß ÿ±ÿÆ ÿØÿßÿØ.")
            else:
                if target_id == OWNER_ID or is_seller(s, target_id):
                    await reply_temp(update, context, "ŸÜŸÖ€å‚Äåÿ™ŸàÿßŸÜ ŸÖÿßŸÑ⁄©/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ÿ±ÿØ."); return
                s.execute(GroupAdmin.__table__.delete().where(
                    (GroupAdmin.chat_id==update.effective_chat.id) & (GroupAdmin.tg_user_id==target_id)
                )); s.commit()
                await reply_temp(update, context, "üóëÔ∏è ÿßÿØŸÖ€åŸÜ ⁄Øÿ±ŸàŸá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
        return

    # ŸÖÿ≥ÿØŸàÿØ/ÿ¢ÿ≤ÿßÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá
    if PAT_GROUP["seller_block"].match(text) or PAT_GROUP["seller_unblock"].match(text):
        block = bool(PAT_GROUP["seller_block"].match(text))
        with SessionLocal() as s:
            if not is_group_admin(s, update.effective_chat.id, update.effective_user.id):
                await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ."); return
            target = None
            m = PAT_GROUP["seller_block"].match(text) if block else PAT_GROUP["seller_unblock"].match(text)
            if update.message.reply_to_message:
                target = update.message.reply_to_message.from_user
            elif m and m.group(1):
                uname = m.group(1)
                urow = s.execute(select(User).where(User.chat_id==update.effective_chat.id, User.username==uname)).scalar_one_or_none()
                if urow:
                    class _Tmp: id=urow.tg_user_id
                    target = _Tmp()
            if not target:
                await reply_temp(update, context, "ÿ±Ÿà€å Ÿæ€åÿßŸÖ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ €åÿß ÿ®ÿß @username ŸÖÿ¥ÿÆÿµ ⁄©ŸÜ."); return
            if not is_seller(s, target.id):
                await reply_temp(update, context, "ÿß€åŸÜ ⁄©ÿßÿ±ÿ®ÿ± ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ŸÜ€åÿ≥ÿ™."); return
            g = s.get(Group, update.effective_chat.id)
            g.settings = g.settings or {}
            bl = set(g.settings.get("blocked_sellers", []))
            if block: bl.add(target.id)
            else: bl.discard(target.id)
            g.settings["blocked_sellers"] = list(bl); s.commit()
        await reply_temp(update, context, "‚úÖ ÿßÿπŸÖÿßŸÑ ÿ¥ÿØ.")
        return

    # ===== ÿ≥ÿß€åÿ± ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ⁄©ÿßÿ±ÿ®ÿ± (ŸÖÿ™ŸÜ€å) =====
    with SessionLocal() as s:
        g = ensure_group(s, update.effective_chat)

        if m := PAT_GROUP["gender"].match(text):
            if not group_active(g):
                await reply_temp(update, context, "‚åõÔ∏è ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá. ¬´ŸÅÿ∂ŸàŸÑ ÿ¥ÿßÿ±⁄ò¬ª ÿ±ÿß ÿ®ÿ≤ŸÜ.", keep=False); return
            gender = "female" if m.group(1)=="ÿØÿÆÿ™ÿ±" else "male"
            u = upsert_user(s, g.id, update.effective_user)
            u.gender = gender; s.commit()
            await reply_temp(update, context, "ÿ´ÿ®ÿ™ ÿ¥ÿØ ‚úÖ"); return

        if m := PAT_GROUP["birthday_set"].match(text):
            if not group_active(g):
                await reply_temp(update, context, "‚åõÔ∏è ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá."); return
            try: d = dt.date.fromisoformat(m.group(1))
            except ValueError:
                await reply_temp(update, context, "ÿ™ÿßÿ±€åÿÆ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±. ŸÅÿ±ŸÖÿ™ YYYY-MM-DD"); return
            u = upsert_user(s, g.id, update.effective_user)
            u.birthday = d; s.commit()
            await reply_temp(update, context, f"ÿ™ŸàŸÑÿØ ÿ´ÿ®ÿ™ ÿ¥ÿØ üéÇ (ÿ¥ŸÖÿ≥€å: {fmt_date_fa(d)})"); return

        if PAT_GROUP["birthday_del"].match(text):
            u = upsert_user(s, g.id, update.effective_user)
            u.birthday = None; s.commit()
            await reply_temp(update, context, "ÿ™ŸàŸÑÿØ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ üóëÔ∏è"); return

        if m := PAT_GROUP["relation_set"].match(text):
            if not group_active(g):
                await reply_temp(update, context, "‚åõÔ∏è ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá."); return
            target_username, date_str = m.group(1), m.group(2)
            try: started = dt.date.fromisoformat(date_str)
            except ValueError:
                await reply_temp(update, context, "ÿ™ÿßÿ±€åÿÆ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±."); return
            me = upsert_user(s, g.id, update.effective_user)
            to = s.execute(select(User).where(User.chat_id==g.id, User.username==target_username)).scalar_one_or_none()
            if not to:
                await reply_temp(update, context, "⁄©ÿßÿ±ÿ®ÿ± ŸáÿØŸÅ Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            s.execute(Relationship.__table__.delete().where(
                (Relationship.chat_id==g.id) & (
                    ((Relationship.user_a_id==me.id) & (Relationship.user_b_id==to.id)) |
                    ((Relationship.user_a_id==to.id) & (Relationship.user_b_id==me.id))
                )
            ))
            s.add(Relationship(chat_id=g.id, user_a_id=min(me.id,to.id), user_b_id=max(me.id,to.id), started_at=started)); s.commit()
            await reply_temp(update, context, f"ÿ±ÿßÿ®ÿ∑Ÿá ÿ´ÿ®ÿ™ ÿ¥ÿØ üíû (ÿ™ÿßÿ±€åÿÆ ÿ¥ŸÖÿ≥€å: {fmt_date_fa(started)})"); return

        if m := PAT_GROUP["relation_del"].match(text):
            target_username = m.group(1)
            me = upsert_user(s, g.id, update.effective_user)
            to = s.execute(select(User).where(User.chat_id==g.id, User.username==target_username)).scalar_one_or_none()
            if not to: await reply_temp(update, context, "⁄©ÿßÿ±ÿ®ÿ± ŸáÿØŸÅ Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            s.execute(Relationship.__table__.delete().where(
                (Relationship.chat_id==g.id) & (
                    ((Relationship.user_a_id==me.id) & (Relationship.user_b_id==to.id)) |
                    ((Relationship.user_a_id==to.id) & (Relationship.user_b_id==me.id))
                )
            )); s.commit()
            await reply_temp(update, context, "ÿ±ÿßÿ®ÿ∑Ÿá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ üóëÔ∏è"); return

        if PAT_GROUP["crush_add"].match(text):
            if not update.message.reply_to_message:
                await reply_temp(update, context, "ÿ±Ÿà€å Ÿæ€åÿßŸÖ ÿ∑ÿ±ŸÅ ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ €åÿß ÿßÿ≤ ÿØ⁄©ŸÖŸá ŸÖŸÜŸà ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ."); return
            if not group_active(g):
                await reply_temp(update, context, "‚åõÔ∏è ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá."); return
            me = upsert_user(s, g.id, update.effective_user)
            to = upsert_user(s, g.id, update.message.reply_to_message.from_user)
            if me.id == to.id:
                await reply_temp(update, context, "ÿ±Ÿà€å ÿÆŸàÿØÿ™ ŸÜŸÖ€å‚Äåÿ¥Ÿá üòÖ"); return
            try:
                s.add(Crush(chat_id=g.id, from_user_id=me.id, to_user_id=to.id)); s.commit()
                await reply_temp(update, context, "⁄©ÿ±ÿßÿ¥ ÿ´ÿ®ÿ™ ÿ¥ÿØ üíò")
            except Exception:
                await reply_temp(update, context, "ÿßÿ≤ ŸÇÿ®ŸÑ ÿ´ÿ®ÿ™ ÿ¥ÿØŸá ÿ®ŸàÿØ.")
            return

        if PAT_GROUP["crush_del"].match(text):
            if not update.message.reply_to_message:
                await reply_temp(update, context, "ÿ±Ÿà€å Ÿæ€åÿßŸÖ ÿ∑ÿ±ŸÅ ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ €åÿß ÿßÿ≤ ÿØ⁄©ŸÖŸá ŸÖŸÜŸà ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ."); return
            me = upsert_user(s, g.id, update.effective_user)
            to = upsert_user(s, g.id, update.message.reply_to_message.from_user)
            s.execute(Crush.__table__.delete().where(
                (Crush.chat_id==g.id) & (Crush.from_user_id==me.id) & (Crush.to_user_id==to.id)
            )); s.commit()
            await reply_temp(update, context, "⁄©ÿ±ÿßÿ¥ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ üóëÔ∏è"); return

        if PAT_GROUP["popular_today"].match(text):
            tz = ZoneInfo(g.timezone or DEFAULT_TZ)
            today = dt.datetime.now(tz).date()
            with SessionLocal() as s2:
                rows = s2.execute(select(ReplyStatDaily).where(
                    (ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.date==today)
                ).order_by(ReplyStatDaily.reply_count.desc()).limit(3)).scalars().all()
            if not rows:
                await reply_temp(update, context, "ÿßŸÖÿ±Ÿàÿ≤ ŸáŸÜŸàÿ≤ ÿ¢ŸÖÿßÿ±€å ŸÜÿØÿßÿ±€åŸÖ.", keep=True); return
            lines=[]
            with SessionLocal() as s3:
                for i,r in enumerate(rows, start=1):
                    u = s3.get(User, r.target_user_id)
                    name = u.first_name or (u.username and f"@{u.username}") or str(u.tg_user_id)
                    lines.append(f"{fa_digits(i)}) {name} ‚Äî {fa_digits(r.reply_count)} ÿ±€åŸæŸÑÿß€å")
            await reply_temp(update, context, "\n".join(lines), keep=True); return

        if PAT_GROUP["ship_tonight"].match(text):
            tz = ZoneInfo(g.timezone or DEFAULT_TZ); today = dt.datetime.now(tz).date()
            with SessionLocal() as s2:
                last = s2.execute(select(ShipHistory).where(
                    (ShipHistory.chat_id==g.id) & (ShipHistory.date==today)
                ).order_by(ShipHistory.id.desc())).scalar_one_or_none()
            if not last:
                await reply_temp(update, context, "ŸáŸÜŸàÿ≤ ÿ¥€åŸæ ÿßŸÖÿ¥ÿ® ÿ≥ÿßÿÆÿ™Ÿá ŸÜÿ¥ÿØŸá. ÿ¢ÿÆÿ± ÿ¥ÿ® ŸÖŸÜÿ™ÿ¥ÿ± ŸÖ€å‚Äåÿ¥Ÿá üí´", keep=True); return
            with SessionLocal() as s3:
                m, f = s3.get(User, last.male_user_id), s3.get(User, last.female_user_id)
            await reply_temp(update, context,
                             f"üíò ÿ¥€åŸæŸê ÿßŸÖÿ¥ÿ®: {(m.first_name or '@'+(m.username or ''))} √ó {(f.first_name or '@'+(f.username or ''))}",
                             keep=True)
            return

        if PAT_GROUP["expiry"].match(text):
            ex = g.expires_at and fmt_dt_fa(g.expires_at, g.timezone)
            await reply_temp(update, context, f"‚è≥ ÿßÿπÿ™ÿ®ÿßÿ± ÿß€åŸÜ ⁄Øÿ±ŸàŸá ÿ™ÿß: {ex or 'ŸÜÿßŸÖÿ¥ÿÆÿµ'}"); return

        if PAT_GROUP["charge"].match(text):
            with SessionLocal() as s2:
                if not is_group_admin(s2, g.id, update.effective_user.id):
                    await reply_temp(update, context, "ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÜÿØÿßÿ±€å."); return
            chat_id = update.effective_chat.id
            kb = [
                [InlineKeyboardButton("€≥€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:30"),
                 InlineKeyboardButton("€π€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:90"),
                 InlineKeyboardButton("€±€∏€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:180")]
            ]
            await open_panel_from_text(update, context, "‚åÅ ŸæŸÜŸÑ ÿ¥ÿßÿ±⁄ò ⁄Øÿ±ŸàŸá", kb, root=False, keep=True)
            return

        if PAT_GROUP["tag_girls"].match(text) or PAT_GROUP["tag_boys"].match(text) or PAT_GROUP["tag_all"].match(text):
            if not update.message.reply_to_message:
                await reply_temp(update, context, "ÿ®ÿ±ÿß€å ÿ™⁄Ø ⁄©ÿ±ÿØŸÜÿå ÿ±Ÿà€å €å⁄© Ÿæ€åÿßŸÖ ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ."); return
            reply_to = update.message.reply_to_message.message_id
            with SessionLocal() as s2:
                if PAT_GROUP["tag_girls"].match(text):
                    users = s2.query(User).filter_by(chat_id=g.id, gender="female").all()
                elif PAT_GROUP["tag_boys"].match(text):
                    users = s2.query(User).filter_by(chat_id=g.id, gender="male").all()
                else:
                    users = s2.query(User).filter_by(chat_id=g.id).all()
            if not users:
                await reply_temp(update, context, "⁄©ÿ≥€å ÿ®ÿ±ÿß€å ÿ™⁄Ø Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            mentions = [mention_of(u) for u in users]
            for pack in chunked(mentions, 4):
                try:
                    await context.bot.send_message(
                        chat_id=g.id, text=" ".join(pack),
                        reply_to_message_id=reply_to, parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    await asyncio.sleep(0.8)
                except Exception as e:
                    logging.info(f"Tag batch send failed: {e}")
            return

        if PAT_GROUP["privacy_me"].match(text):
            me_id = update.effective_user.id
            with SessionLocal() as s2:
                u = s2.execute(select(User).where(User.chat_id==g.id, User.tg_user_id==me_id)).scalar_one_or_none()
                if not u:
                    await reply_temp(update, context, "ÿßÿ∑ŸÑÿßÿπÿßÿ™€å ÿßÿ≤ ÿ¥ŸÖÿß ŸÜÿØÿßÿ±€åŸÖ."); return
                s2.execute(Crush.__table__.delete().where((Crush.chat_id==g.id) & ((Crush.from_user_id==u.id) | (Crush.to_user_id==u.id))))
                s2.execute(Relationship.__table__.delete().where((Relationship.chat_id==g.id) & ((Relationship.user_a_id==u.id) | (Relationship.user_b_id==u.id))))
                s2.execute(ReplyStatDaily.__table__.delete().where((ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.target_user_id==u.id)))
                s2.execute(User.__table__.delete().where((User.chat_id==g.id) & (User.id==u.id)))
                s2.commit()
            await reply_temp(update, context, "‚úÖ ÿ™ŸÖÿßŸÖ ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿ¥ŸÖÿß ÿØÿ± ÿß€åŸÜ ⁄Øÿ±ŸàŸá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ."); return

        if PAT_GROUP["privacy_info"].match(text):
            me_id = update.effective_user.id
            with SessionLocal() as s2:
                u = s2.execute(select(User).where(User.chat_id==g.id, User.tg_user_id==me_id)).scalar_one_or_none()
                if not u:
                    await reply_temp(update, context, "⁄Ü€åÿ≤€å ÿßÿ≤ ÿ¥ŸÖÿß ÿ∞ÿÆ€åÿ±Ÿá ŸÜÿ¥ÿØŸá."); return
                info = f"üë§ ŸÜÿßŸÖ: {u.first_name or ''} @{u.username or ''}\nÿ¨ŸÜÿ≥€åÿ™: {u.gender}\nÿ™ŸàŸÑÿØ (ÿ¥ŸÖÿ≥€å): {fmt_date_fa(u.birthday)}"
            await reply_temp(update, context, info); return

        if PAT_GROUP["wipe_group"].match(text):
            with SessionLocal() as s2:
                if not is_group_admin(s2, g.id, update.effective_user.id):
                    await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©."); return
            kb = [[InlineKeyboardButton("üßπ ÿ™ÿß€å€åÿØ Ÿæÿß⁄©ÿ≥ÿßÿ≤€å", callback_data=f"wipe:{g.id}"),
                   InlineKeyboardButton("ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="noop")]]
            await open_panel_from_text(update, context, "‚ö†Ô∏è ŸÖÿ∑ŸÖÿ¶ŸÜ€å ⁄©ŸÑ ÿØÿßÿØŸá‚ÄåŸáÿß€å ⁄Øÿ±ŸàŸá ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØÿü", kb, root=False, keep=True)
            return

    # ÿ¥ŸÖÿßÿ±ÿ¥ ÿ±€åŸæŸÑÿß€å‚ÄåŸáÿß
    if update.message.reply_to_message:
        with SessionLocal() as s:
            g = ensure_group(s, update.effective_chat)
            tz = ZoneInfo(g.timezone or DEFAULT_TZ); today = dt.datetime.now(tz).date()
            target = upsert_user(s, g.id, update.message.reply_to_message.from_user)
            upsert_user(s, g.id, update.effective_user)
            row = s.execute(select(ReplyStatDaily).where(
                (ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.date==today) & (ReplyStatDaily.target_user_id==target.id)
            )).scalar_one_or_none()
            if not row:
                row = ReplyStatDaily(chat_id=g.id, date=today, target_user_id=target.id, reply_count=0)
                s.add(row)
            row.reply_count += 1
            s.commit()

# ================== PRIVATE (OWNER/SELLER) ==================
async def on_private_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private" or not update.message or not update.message.text:
        return
    text = clean_text(update.message.text)
    bot_username = context.bot.username
    with SessionLocal() as s:
        uid = update.effective_user.id
        seller = is_seller(s, uid)
        if uid != OWNER_ID and not seller:
            if text in ("/start","start","⁄©ŸÖ⁄©","ÿ±ÿßŸáŸÜŸÖÿß"):
                await reply_temp(update, context,
                                 "ÿß€åŸÜ ÿ±ÿ®ÿßÿ™ ŸÖÿÆÿµŸàÿµ ⁄Øÿ±ŸàŸá‚ÄåŸáÿßÿ≥ÿ™. ÿ®ÿß ÿØ⁄©ŸÖŸáŸî ÿ≤€åÿ± ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ Ÿà €∑ ÿ±Ÿàÿ≤ ÿ±ÿß€å⁄ØÿßŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ.\nÿØÿ± ⁄Øÿ±ŸàŸá ¬´ŸÅÿ∂ŸàŸÑ ŸÖŸÜŸà¬ª ÿ±ÿß ÿ®ÿ≤ŸÜ.",
                                 reply_markup=contact_kb(bot_username=bot_username), keep=True)
                return
            await reply_temp(update, context, "ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ ÿ®ÿß€åÿØ ŸÖÿßŸÑ⁄©/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿ®ÿßÿ¥€å. ¬´/start¬ª €åÿß ¬´⁄©ŸÖ⁄©¬ª ÿ®ÿ≤ŸÜ."); return

        if PAT_DM["panel"].match(text):
            who = "üëë ŸæŸÜŸÑ ŸÖÿßŸÑ⁄©" if uid==OWNER_ID else "üõçÔ∏è ŸæŸÜŸÑ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá"
            rows = [
                [InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß", callback_data="adm:groups:0")],
                [InlineKeyboardButton("üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß", callback_data="adm:sellers")] if uid==OWNER_ID else []
            ]
            rows = [r for r in rows if r]  # remove empties
            await open_panel_from_text(update, context, who, rows, root=True, keep=True)
            return

        if PAT_DM["groups"].match(text):
            await open_panel_from_text(update, context, "üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß", [[InlineKeyboardButton("ŸÜŸÖÿß€åÿ¥", callback_data="adm:groups:0")]], root=True, keep=True)
            return

        if m := PAT_DM["manage"].match(text):
            chat_id = int(m.group(1))
            g = s.get(Group, chat_id)
            if not g: await reply_temp(update, context, "⁄Øÿ±ŸàŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            ex = g.expires_at and fmt_dt_fa(g.expires_at, g.timezone)
            title = f"üß© ŸæŸÜŸÑ ⁄Øÿ±ŸàŸá: {g.title}\nchat_id: {g.id}\nÿßŸÜŸÇÿ∂ÿß: {ex or 'ŸÜÿßŸÖÿ¥ÿÆÿµ'}"
            kb = [
                [InlineKeyboardButton("€≥€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:30"),
                 InlineKeyboardButton("€π€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:90"),
                 InlineKeyboardButton("€±€∏€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:180")],
                [InlineKeyboardButton("‚ÑπÔ∏è ÿßŸÜŸÇÿ∂ÿß", callback_data="ui:expiry"),
                 InlineKeyboardButton("üö™ ÿÆÿ±Ÿàÿ¨ ÿ±ÿ®ÿßÿ™", callback_data=f"grp:{g.id}:leave")],
                [InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá", url=f"https://t.me/{bot_username}?startgroup=true")],
            ]
            await open_panel_from_text(update, context, title, kb, root=False, keep=True)
            return

        if m := PAT_DM["extend"].match(text):
            chat_id = int(m.group(1)); days = int(m.group(2))
            g = s.get(Group, chat_id)
            if not g: await reply_temp(update, context, "⁄Øÿ±ŸàŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            base = g.expires_at if g.expires_at and g.expires_at > dt.datetime.utcnow() else dt.datetime.utcnow()
            g.expires_at = base + dt.timedelta(days=days)
            s.add(SubscriptionLog(chat_id=g.id, actor_tg_user_id=uid, action="extend", amount_days=days)); s.commit()
            await reply_temp(update, context, f"‚úÖ ÿ™ŸÖÿØ€åÿØ ÿ¥ÿØ ÿ™ÿß {fmt_dt_fa(g.expires_at, g.timezone)}"); return

        if m := PAT_DM["set_tz"].match(text):
            chat_id = int(m.group(1)); tzname = m.group(2)
            g = s.get(Group, chat_id)
            if not g: await reply_temp(update, context, "⁄Øÿ±ŸàŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            try: ZoneInfo(tzname)
            except Exception: await reply_temp(update, context, "ŸÜÿßŸÖ ŸÖŸÜÿ∑ŸÇŸá ÿ≤ŸÖÿßŸÜ€å ŸÜÿßŸÖÿπÿ™ÿ®ÿ±. ŸÖÿ´ÿßŸÑ: Asia/Tehran"); return
            g.timezone = tzname; s.commit()
            await reply_temp(update, context, f"‚è± ÿ™ÿß€åŸÖ‚Äåÿ≤ŸàŸÜ ⁄Øÿ±ŸàŸá ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØ: {tzname}"); return

        if PAT_DM["list_sellers"].match(text):
            sellers = s.query(Seller).order_by(Seller.id.asc()).all()
            if not sellers:
                await reply_temp(update, context, "Ÿá€å⁄Ü ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚Äåÿß€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá."); return
            rows=[]
            for sl in sellers[:50]:
                cap = f"{sl.tg_user_id} | {'ŸÅÿπÿßŸÑ' if sl.is_active else 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}"
                r = [InlineKeyboardButton(f"üìà ÿ¢ŸÖÿßÿ± {cap}", callback_data=f"sl:stat:{sl.tg_user_id}")]
                if uid==OWNER_ID:
                    r.append(InlineKeyboardButton("‚ùå ÿπÿ≤ŸÑ", callback_data=f"sl:del:{sl.tg_user_id}"))
                rows.append(r)
            rows.append([InlineKeyboardButton("‚ûï ÿ±ÿßŸáŸÜŸÖÿß€å ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá", callback_data="sl:add:help")])
            await open_panel_from_text(update, context, "üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß", rows, root=True, keep=True); return

        if m := PAT_DM["add_seller"].match(text):
            if uid != OWNER_ID: await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜÿØ."); return
            seller_id = int(m.group(1)); note = m.group(2)
            ex = s.execute(select(Seller).where(Seller.tg_user_id==seller_id)).scalar_one_or_none()
            if ex:
                ex.is_active = True
                if note: ex.note = note
            else:
                s.add(Seller(tg_user_id=seller_id, note=note, is_active=True))
            s.commit()
            await reply_temp(update, context, "‚úÖ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿßÿ∂ÿßŸÅŸá/ŸÅÿπÿßŸÑ ÿ¥ÿØ."); return

        if m := PAT_DM["del_seller"].match(text):
            if uid != OWNER_ID: await reply_temp(update, context, "ŸÅŸÇÿ∑ ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿ±ÿß ÿπÿ≤ŸÑ ⁄©ŸÜÿØ."); return
            seller_id = int(m.group(1))
            ex = s.execute(select(Seller).where(Seller.tg_user_id==seller_id)).scalar_one_or_none()
            if not ex: await reply_temp(update, context, "ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ."); return
            ex.is_active = False; s.commit()
            await reply_temp(update, context, "üóëÔ∏è ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿπÿ≤ŸÑ ÿ¥ÿØ."); return

# ================== CALLBACKS ==================
def _panel_owner_ok(q) -> bool:
    key = (q.message.chat.id, q.message.message_id)
    meta = PANELS.get(key)
    if not meta:  # ÿß⁄Øÿ± ŸæŸÜŸÑ€å ŸÜÿ®ÿßÿ¥ÿØÿå ÿπÿ®Ÿàÿ± (ÿ®ÿ±ÿß€å Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ŸÜÿßŸæŸÜŸÑ€å)
        return True
    if meta["owner"] != q.from_user.id:
        return False
    return True

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q or not q.data: return
    try:
        await q.answer("‚úÖ ⁄©ŸÑ€å⁄© ÿ´ÿ®ÿ™ ÿ¥ÿØ", cache_time=0, show_alert=False)
    except Exception: ...

    # ŸÅŸÇÿ∑ ÿµÿßÿ≠ÿ® ŸæŸÜŸÑ
    if not _panel_owner_ok(q):
        await q.answer("ÿß€åŸÜ ŸÖŸÜŸà ŸÖÿÆÿµŸàÿµ ⁄©ÿ≥€å ÿßÿ≥ÿ™ ⁄©Ÿá ÿ¢ŸÜ ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ÿ±ÿØŸá.", show_alert=True)
        return

    # ŸÜÿßŸàÿ®ÿ±€å ŸæŸÜŸÑ‚ÄåŸáÿß
    if q.data == "nav:close":
        try:
            PANELS.pop((q.message.chat.id, q.message.message_id), None)
            await q.message.delete()
        except Exception: ...
        return
    if q.data == "nav:back":
        # ŸæŸÜŸÑ ŸÅÿπŸÑ€å ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ŸÜÿõ ŸÇÿ®ŸÑ€å ÿ±Ÿà€å ⁄Üÿ™ ÿ®ÿßŸÇ€å‚Äåÿ≥ÿ™
        try:
            PANELS.pop((q.message.chat.id, q.message.message_id), None)
            await q.message.delete()
        except Exception: ...
        return

    # ⁄©ŸÖ⁄© ⁄©ÿßÿ±ÿ®ÿ±
    if q.data == "usr:help":
        await q.message.chat.send_message(footer(user_help_text()))
        return

    # Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å
    if q.data == "cfg:open":
        with SessionLocal() as s:
            if not is_group_admin(s, q.message.chat.id, q.from_user.id):
                await q.answer("ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©.", show_alert=True); return
        title = "‚öôÔ∏è Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ŸÅÿ∂ŸàŸÑ"
        rows = kb_config(q.message.chat.id, context.bot.username)
        await open_panel_from_cb(q.message, q.from_user.id, context, title, rows, root=True)
        return

    # ÿ¥ÿßÿ±⁄ò
    if q.data.startswith("chg:"):
        _, chat_id_str, days_str = q.data.split(":")
        target_chat_id = int(chat_id_str); days = int(days_str)
        with SessionLocal() as s:
            if not is_group_admin(s, target_chat_id, q.from_user.id):
                await q.answer("ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÜÿØÿßÿ±€å.", show_alert=True); return
            g = s.get(Group, target_chat_id) or ensure_group(s, q.message.chat)
            base = g.expires_at if g.expires_at and g.expires_at > dt.datetime.utcnow() else dt.datetime.utcnow()
            g.expires_at = base + dt.timedelta(days=days)
            s.add(SubscriptionLog(chat_id=g.id, actor_tg_user_id=q.from_user.id, action="extend", amount_days=days))
            s.commit()
            ex_str = fmt_dt_fa(g.expires_at, g.timezone)
        await q.answer(f"‚úÖ ÿ™ŸÖÿØ€åÿØ ÿ¥ÿØ ÿ™ÿß {ex_str}", show_alert=True)
        return

    if q.data == "ui:charge:open":
        with SessionLocal() as s:
            if not is_group_admin(s, q.message.chat.id, q.from_user.id):
                await q.answer("ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©.", show_alert=True); return
        chat_id = q.message.chat.id
        kb = [
            [InlineKeyboardButton("€≥€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:30"),
             InlineKeyboardButton("€π€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:90"),
             InlineKeyboardButton("€±€∏€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{chat_id}:180")]
        ]
        await open_panel_from_cb(q.message, q.from_user.id, context, "‚åÅ ŸæŸÜŸÑ ÿ¥ÿßÿ±⁄ò ⁄Øÿ±ŸàŸá", kb, root=False)
        return

    # ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß
    if q.data.startswith("adm:groups"):
        parts = q.data.split(":")
        page = int(parts[2]) if len(parts)>=3 else 0
        PAGE_SIZE = 5
        with SessionLocal() as s:
            groups = s.query(Group).order_by(Group.id.asc()).all()
        if not groups:
            await q.message.chat.send_message("⁄Øÿ±ŸàŸá€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá.")
            return
        total_pages = (len(groups)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(0, min(page, total_pages-1))
        start = page*PAGE_SIZE
        subset = groups[start:start+PAGE_SIZE]
        lines = []
        rows=[]
        for g in subset:
            ex = g.expires_at and fmt_dt_fa(g.expires_at, g.timezone)
            stat = "ŸÅÿπÿßŸÑ ‚úÖ" if group_active(g) else "ŸÖŸÜŸÇÿ∂€å ‚õîÔ∏è"
            lines.append(f"{g.title} | chat_id: {g.id} | ÿ™ÿß: {ex or 'ŸÜÿßŸÖÿ¥ÿÆÿµ'} | {stat}")
            rows.append([InlineKeyboardButton(f"üß© ŸæŸÜŸÑ ¬´{g.title[:18]}¬ª", callback_data=f"grp:{g.id}:panel")])
        nav=[]
        if page>0: nav.append(InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"adm:groups:{page-1}"))
        if page<total_pages-1: nav.append(InlineKeyboardButton("‚û°Ô∏è ÿ®ÿπÿØ€å", callback_data=f"adm:groups:{page+1}"))
        if nav: rows.append(nav)
        rows.append([InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá", url=f"https://t.me/{context.bot.username}?startgroup=true")])
        rows.append([InlineKeyboardButton("üìû ÿ™ŸÖÿßÿ≥ ÿ®ÿß ŸÖÿßŸÑ⁄©", url=f"https://t.me/{OWNER_CONTACT_USERNAME}")])
        await open_panel_from_cb(q.message, q.from_user.id, context,
                                 f"üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß (ÿµŸÅÿ≠Ÿá {fa_digits(page+1)}/{fa_digits(total_pages)})\n" + "\n".join(lines),
                                 rows, root=True)
        return

    if q.data.startswith("grp:"):
        _, chat_id_str, action = q.data.split(":")
        chat_id = int(chat_id_str)
        if action == "panel":
            with SessionLocal() as s:
                g = s.get(Group, chat_id)
            if not g:
                await q.answer("⁄Øÿ±ŸàŸá €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.", show_alert=True); return
            ex = g.expires_at and fmt_dt_fa(g.expires_at, g.timezone)
            title = f"üß© ŸæŸÜŸÑ ⁄Øÿ±ŸàŸá: {g.title}\nchat_id: {g.id}\nÿßŸÜŸÇÿ∂ÿß: {ex or 'ŸÜÿßŸÖÿ¥ÿÆÿµ'}"
            kb = [
                [InlineKeyboardButton("€≥€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:30"),
                 InlineKeyboardButton("€π€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:90"),
                 InlineKeyboardButton("€±€∏€∞ ÿ±Ÿàÿ≤", callback_data=f"chg:{g.id}:180")],
                [InlineKeyboardButton("‚ÑπÔ∏è ÿßŸÜŸÇÿ∂ÿß", callback_data="ui:expiry"),
                 InlineKeyboardButton("üö™ ÿÆÿ±Ÿàÿ¨ ÿ±ÿ®ÿßÿ™", callback_data=f"grp:{g.id}:leave")],
                [InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ⁄Øÿ±ŸàŸá", url=f"https://t.me/{context.bot.username}?startgroup=true")],
            ]
            await open_panel_from_cb(q.message, q.from_user.id, context, title, kb, root=False)
            return
        if action == "leave":
            try:
                await context.bot.leave_chat(chat_id)
                await q.answer("‚úÖ ÿ±ÿ®ÿßÿ™ ÿßÿ≤ ⁄Øÿ±ŸàŸá ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ.", show_alert=True)
            except Exception:
                await q.answer("ÿÆÿ∑ÿß ÿØÿ± ÿÆÿ±Ÿàÿ¨ (ŸÖŸÖ⁄©ŸÜ ÿßÿ≥ÿ™ ÿπÿ∂Ÿà ŸÜÿ®ÿßÿ¥ŸÖ).", show_alert=True)
            return

    # ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß
    if q.data == "adm:sellers":
        with SessionLocal() as s:
            sellers = s.query(Seller).order_by(Seller.id.asc()).all()
        if not sellers:
            await q.message.chat.send_message("Ÿá€å⁄Ü ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚Äåÿß€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá.")
            return
        rows=[]
        for sl in sellers[:50]:
            cap = f"{sl.tg_user_id} | {'ŸÅÿπÿßŸÑ' if sl.is_active else 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}"
            r = [InlineKeyboardButton(f"üìà ÿ¢ŸÖÿßÿ± {cap}", callback_data=f"sl:stat:{sl.tg_user_id}")]
            if q.from_user.id==OWNER_ID:
                r.append(InlineKeyboardButton("‚ùå ÿπÿ≤ŸÑ", callback_data=f"sl:del:{sl.tg_user_id}"))
            rows.append(r)
        rows.append([InlineKeyboardButton("‚ûï ÿ±ÿßŸáŸÜŸÖÿß€å ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá", callback_data="sl:add:help")])
        await open_panel_from_cb(q.message, q.from_user.id, context, "üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß", rows, root=True)
        return

    if q.data == "adm:help":
        txt = (
            "ÿ±ÿßŸáŸÜŸÖÿß€å ŸÖÿßŸÑ⁄©/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá:\n"
            "‚Ä¢ üìã ŸÑ€åÿ≥ÿ™ ⁄Øÿ±ŸàŸá‚ÄåŸáÿß ‚Üí ŸæŸÜŸÑ Ÿáÿ± ⁄Øÿ±ŸàŸá: ÿ¥ÿßÿ±⁄ò €≥€∞/€π€∞/€±€∏€∞ÿå ŸÖÿ¥ÿßŸáÿØŸá ÿßŸÜŸÇÿ∂ÿßÿå ÿÆÿ±Ÿàÿ¨ÿå ÿßŸÅÿ≤ŸàÿØŸÜ ÿ®Ÿá ⁄Øÿ±ŸàŸá.\n"
            "‚Ä¢ üõçÔ∏è ŸÑ€åÿ≥ÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß: ÿ¢ŸÖÿßÿ±ÿå ÿπÿ≤ŸÑ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá (ŸÅŸÇÿ∑ ŸÖÿßŸÑ⁄©)ÿå ÿ±ÿßŸáŸÜŸÖÿß€å ÿßŸÅÿ≤ŸàÿØŸÜ.\n"
            "‚Ä¢ ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ Ÿæ€å‚ÄåŸà€å: ¬´ÿ™ŸÖÿØ€åÿØ <chat_id> <days>¬ªÿå ¬´ÿ™ŸÜÿ∏€åŸÖ ÿ≤ŸÖÿßŸÜ <chat_id> <Area/City>¬ªÿå ¬´ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá <id> [€åÿßÿØÿØÿßÿ¥ÿ™]¬ªÿå ¬´ÿ≠ÿ∞ŸÅ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá <id>¬ª."
        )
        await q.message.chat.send_message(footer(txt))
        return

    if q.data.startswith("sl:"):
        _, sub, arg = q.data.split(":")
        with SessionLocal() as s:
            if sub == "stat":
                tid = int(arg)
                now = dt.datetime.utcnow()
                def _count(days):
                    since = now - dt.timedelta(days=days)
                    rows = s.execute(select(SubscriptionLog).where(
                        (SubscriptionLog.actor_tg_user_id==tid) &
                        (SubscriptionLog.action=="extend") &
                        (SubscriptionLog.created_at>=since)
                    )).scalars().all()
                    return len(rows), sum([r.amount_days or 0 for r in rows])
                c7,d7 = _count(7); c30,d30 = _count(30)
                rows_all = s.execute(select(SubscriptionLog).where(
                    (SubscriptionLog.actor_tg_user_id==tid) & (SubscriptionLog.action=="extend")
                )).scalars().all()
                call, dall = len(rows_all), sum([r.amount_days or 0 for r in rows_all])
                txt = (f"üìà ÿ¢ŸÖÿßÿ± ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá {tid}:\n"
                       f"€∑ ÿ±Ÿàÿ≤ ÿßÿÆ€åÿ±: {fa_digits(c7)} ÿ™ŸÖÿØ€åÿØ / {fa_digits(d7)} ÿ±Ÿàÿ≤\n"
                       f"€≥€∞ ÿ±Ÿàÿ≤ ÿßÿÆ€åÿ±: {fa_digits(c30)} ÿ™ŸÖÿØ€åÿØ / {fa_digits(d30)} ÿ±Ÿàÿ≤\n"
                       f"ŸÖÿ¨ŸÖŸàÿπ: {fa_digits(call)} ÿ™ŸÖÿØ€åÿØ / {fa_digits(dall)} ÿ±Ÿàÿ≤")
                await q.message.chat.send_message(footer(txt))
                return
            elif sub == "del":
                if q.from_user.id != OWNER_ID:
                    await q.answer("ŸÅŸÇÿ∑ ŸÖÿßŸÑ⁄© ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ.", show_alert=True); return
                tid = int(arg)
                ex = s.execute(select(Seller).where(Seller.tg_user_id==tid)).scalar_one_or_none()
                if not ex: await q.answer("ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ.", show_alert=True); return
                ex.is_active = False; s.commit()
                await q.answer("üóëÔ∏è ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿπÿ≤ŸÑ ÿ¥ÿØ.", show_alert=True); return
            elif sub == "add" and arg=="help":
                txt = "ÿ®ÿ±ÿß€å ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá: ÿØÿ± ŸáŸÖ€åŸÜ ⁄Üÿ™ ÿ®ŸÅÿ±ÿ≥ÿ™:\n¬´ÿßŸÅÿ≤ŸàÿØŸÜ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá <tg_user_id> [€åÿßÿØÿØÿßÿ¥ÿ™]¬ª"
                await q.message.chat.send_message(footer(txt)); return

    # ŸÖÿØ€åÿ±ÿßŸÜ ⁄Øÿ±ŸàŸá
    if q.data == "ga:list":
        with SessionLocal() as s:
            if not is_group_admin(s, q.message.chat.id, q.from_user.id):
                await q.answer("ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©.", show_alert=True); return
            admins = s.query(GroupAdmin).filter_by(chat_id=q.message.chat.id).all()
        names = [str(a.tg_user_id) for a in admins] or ["‚Äî"]
        txt = ("üë• ŸÖÿØ€åÿ±ÿßŸÜ ŸÖÿ≠ŸÑ€å ÿß€åŸÜ ⁄Øÿ±ŸàŸá:\n"
               f"{fa_digits('ÿå '.join(names))}\n\n"
               "ÿßŸÅÿ≤ŸàÿØŸÜ: ¬´ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ¬ª (ÿ±€åŸæŸÑÿß€å) €åÿß ¬´ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ @username¬ª\n"
               "ÿ≠ÿ∞ŸÅ: ¬´ÿ≠ÿ∞ŸÅ ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ¬ª (ÿ±€åŸæŸÑÿß€å) €åÿß ¬´ÿ≠ÿ∞ŸÅ ŸÅÿ∂ŸàŸÑ ÿßÿØŸÖ€åŸÜ @username¬ª")
        await q.message.chat.send_message(footer(txt))
        return

    # ÿ¨ŸÜÿ≥€åÿ™
    if q.data == "ui:gset":
        kb = [[InlineKeyboardButton("üëß ÿØÿÆÿ™ÿ±", callback_data="gset:female"),
               InlineKeyboardButton("üë¶ Ÿæÿ≥ÿ±", callback_data="gset:male")]]
        await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ¨ŸÜÿ≥€åÿ™ ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", kb, root=False)
        return

    if q.data.startswith("gset:"):
        gender = q.data.split(":")[1]
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            u = upsert_user(s, g.id, q.from_user)
            u.gender = "female" if gender=="female" else "male"
            s.commit()
        await q.answer("ÿ´ÿ®ÿ™ ÿ¥ÿØ ‚úÖ", show_alert=True)
        return

    # ÿ´ÿ®ÿ™ ÿ™ŸàŸÑÿØ ÿ®ÿß ÿØ⁄©ŸÖŸá (ŸæŸÜŸÑ ⁄ÜŸÜÿØ ŸÖÿ±ÿ≠ŸÑŸá‚Äåÿß€å)
    def _year_page(start_year: int) -> List[List[InlineKeyboardButton]]:
        years = [start_year+i for i in range(-8, 9)]
        rows = []
        for i in range(0, len(years), 3):
            chunk = years[i:i+3]
            rows.append([InlineKeyboardButton(fa_digits(y), callback_data=f"bd:y:{y}") for y in chunk])
        rows.append([InlineKeyboardButton("‚è™", callback_data=f"bd:yp:{years[0]-17}"),
                     InlineKeyboardButton("ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="bd:cancel"),
                     InlineKeyboardButton("‚è©", callback_data=f"bd:yn:{years[-1]+17}")])
        return rows

    def _month_kb(year: int) -> List[List[InlineKeyboardButton]]:
        rows = []
        for r in (1,4,7,10):
            rows.append([InlineKeyboardButton(fa_digits(f"{m:02d}"), callback_data=f"bd:m:{year}:{m}") for m in range(r, r+3)])
        rows.append([InlineKeyboardButton("‚Ü©Ô∏è ÿ≥ÿßŸÑ", callback_data="ui:bd:start")])
        return rows

    def _days_kb(year:int, month:int) -> List[List[InlineKeyboardButton]]:
        import calendar
        nd = calendar.monthrange(year, month)[1]
        rows = []; row=[]
        for d in range(1, nd+1):
            row.append(InlineKeyboardButton(fa_digits(f"{d:02d}"), callback_data=f"bd:d:{year}:{month}:{d}"))
            if len(row)==7: rows.append(row); row=[]
        if row: rows.append(row)
        rows.append([InlineKeyboardButton("‚Ü©Ô∏è ŸÖÿßŸá", callback_data=f"bd:m:{year}:{month}")])
        return rows

    if q.data in ("ui:bd:start","bd:start"):
        await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ≥ÿßŸÑ ÿ™ŸàŸÑÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", _year_page(dt.datetime.utcnow().year-5), root=False)
        return

    if q.data.startswith("bd:yp:") or q.data.startswith("bd:yn:"):
        base = int(q.data.split(":")[2])
        await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ≥ÿßŸÑ ÿ™ŸàŸÑÿØ:", _year_page(base), root=False)
        return

    if q.data.startswith("bd:y:"):
        y = int(q.data.split(":")[2])
        await open_panel_from_cb(q.message, q.from_user.id, context, "ŸÖÿßŸá ÿ™ŸàŸÑÿØ:", _month_kb(y), root=False)
        return

    if q.data.startswith("bd:m:"):
        parts = q.data.split(":")
        if len(parts)==4:
            y = int(parts[2]); m = int(parts[3])
            await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ±Ÿàÿ≤ ÿ™ŸàŸÑÿØ:", _days_kb(y,m), root=False)
        else:
            await open_panel_from_cb(q.message, q.from_user.id, context, "ŸÖÿßŸá ÿ™ŸàŸÑÿØ:", _month_kb(int(parts[2])), root=False)
        return

    if q.data.startswith("bd:d:"):
        _,_, y,m,d = q.data.split(":")
        Y,M,D = int(y), int(m), int(d)
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            u = upsert_user(s, g.id, q.from_user)
            u.birthday = dt.date(Y,M,D); s.commit()
        await q.answer("ÿ™ŸàŸÑÿØ ÿ´ÿ®ÿ™ ÿ¥ÿØ üéÇ", show_alert=True)
        await q.message.chat.send_message(f"üéÇ ÿ™ÿßÿ±€åÿÆ ÿ™ŸàŸÑÿØ ÿ¥ŸÖÿß (ÿ¥ŸÖÿ≥€å): {fmt_date_fa(dt.date(Y,M,D))}")
        return

    if q.data == "bd:cancel":
        await q.answer("ŸÑÿ∫Ÿà ÿ¥ÿØ", show_alert=False); return

    # ⁄©ÿ±ÿßÿ¥/ÿ±ÿßÿ®ÿ∑Ÿá ÿ®ÿß ÿØ⁄©ŸÖŸá (ŸÜ€åÿßÿ≤ ÿ®Ÿá ÿ±€åŸæŸÑÿß€å)
    if q.data in ("ui:crush:add","ui:crush:del","ui:rel:add","ui:rel:del"):
        if not q.message or not q.message.reply_to_message:
            await q.answer("ÿ±Ÿà€å Ÿæ€åÿßŸÖ ÿ∑ÿ±ŸÅ ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ Ÿà ÿØŸàÿ®ÿßÿ±Ÿá ÿ®ÿ≤ŸÜ.", show_alert=True); return

    if q.data == "ui:crush:add":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            if not group_active(g): await q.answer("ÿßÿπÿ™ÿ®ÿßÿ± ⁄Øÿ±ŸàŸá ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá.", show_alert=True); return
            me = upsert_user(s, g.id, q.from_user)
            to = upsert_user(s, g.id, q.message.reply_to_message.from_user)
            if me.id == to.id: await q.answer("ÿ±Ÿà€å ÿÆŸàÿØÿ™ ŸÜŸÖ€å‚Äåÿ¥Ÿá üòÖ", show_alert=True); return
            try:
                s.add(Crush(chat_id=g.id, from_user_id=me.id, to_user_id=to.id)); s.commit()
                await q.answer("⁄©ÿ±ÿßÿ¥ ÿ´ÿ®ÿ™ ÿ¥ÿØ üíò", show_alert=True)
            except Exception:
                await q.answer("ŸÇÿ®ŸÑÿßŸã ÿ´ÿ®ÿ™ ÿ¥ÿØŸá.", show_alert=True)
        return

    if q.data == "ui:crush:del":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            me = upsert_user(s, g.id, q.from_user)
            to = upsert_user(s, g.id, q.message.reply_to_message.from_user)
            s.execute(Crush.__table__.delete().where(
                (Crush.chat_id==g.id) & (Crush.from_user_id==me.id) & (Crush.to_user_id==to.id)
            )); s.commit()
        await q.answer("⁄©ÿ±ÿßÿ¥ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ üóëÔ∏è", show_alert=True)
        return

    if q.data == "ui:rel:add":
        # ÿßŸÜÿ™ÿÆÿßÿ® ÿ™ÿßÿ±€åÿÆ ÿØÿ± ŸæŸÜŸÑ ÿ¨ÿØÿß⁄ØÿßŸÜŸá (ÿ≥ÿßŸÑ/ŸÖÿßŸá/ÿ±Ÿàÿ≤)
        await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ ÿ±ÿßÿ®ÿ∑Ÿá ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", _year_page(dt.datetime.utcnow().year-5), root=False)
        # ÿØÿ± ŸÖÿ±ÿ≠ŸÑŸá ÿßŸÜÿ™ÿÆÿßÿ® ÿ±Ÿàÿ≤ÿå ÿØÿßÿØŸá‚ÄåŸáÿß ÿ±ÿß ÿ´ÿ®ÿ™ ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ (ÿ®ÿ±ÿß€å ÿ≥ÿßÿØ⁄Ø€å ÿß€åŸÜÿ¨ÿß ÿßÿ≤ ÿ±€åŸæŸÑÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ)
        return

    if q.data == "ui:rel:del":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            me = upsert_user(s, g.id, q.from_user)
            to = upsert_user(s, g.id, q.message.reply_to_message.from_user)
            s.execute(Relationship.__table__.delete().where(
                (Relationship.chat_id==g.id) & (
                    ((Relationship.user_a_id==me.id) & (Relationship.user_b_id==to.id)) |
                    ((Relationship.user_a_id==to.id) & (Relationship.user_b_id==me.id))
                )
            )); s.commit()
        await q.answer("ÿ±ÿßÿ®ÿ∑Ÿá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ üóëÔ∏è", show_alert=True)
        return

    # ŸÖÿ≠ÿ®Ÿàÿ®/ÿ¥€åŸæ (ŸÖÿßŸÜÿØ⁄Øÿßÿ±)
    if q.data == "ui:pop":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            tz = ZoneInfo(g.timezone or DEFAULT_TZ); today = dt.datetime.now(tz).date()
            rows = s.execute(select(ReplyStatDaily).where(
                (ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.date==today)
            ).order_by(ReplyStatDaily.reply_count.desc()).limit(3)).scalars().all()
            if not rows:
                await q.answer("ÿßŸÖÿ±Ÿàÿ≤ ÿ¢ŸÖÿßÿ±€å ŸÜÿØÿßÿ±€åŸÖ.", show_alert=True); return
            lines=[]
            for i,r in enumerate(rows, start=1):
                u = s.get(User, r.target_user_id)
                name = u.first_name or (u.username and f"@{u.username}") or str(u.tg_user_id)
                lines.append(f"{fa_digits(i)}) {name} ‚Äî {fa_digits(r.reply_count)} ÿ±€åŸæŸÑÿß€å")
        await q.message.chat.send_message("\n".join(lines))
        return

    if q.data == "ui:ship":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            tz = ZoneInfo(g.timezone or DEFAULT_TZ); today = dt.datetime.now(tz).date()
            last = s.execute(select(ShipHistory).where(
                (ShipHistory.chat_id==g.id) & (ShipHistory.date==today)
            ).order_by(ShipHistory.id.desc())).scalar_one_or_none()
        if not last:
            await q.answer("ŸáŸÜŸàÿ≤ ÿ¥€åŸæ ÿßŸÖÿ¥ÿ® ÿ≥ÿßÿÆÿ™Ÿá ŸÜÿ¥ÿØŸá.", show_alert=True); return
        with SessionLocal() as s:
            m, f = s.get(User, last.male_user_id), s.get(User, last.female_user_id)
        await q.message.chat.send_message(f"üíò ÿ¥€åŸæ ÿßŸÖÿ¥ÿ®: {(m.first_name or '@'+(m.username or ''))} √ó {(f.first_name or '@'+(f.username or ''))}")
        return

    # ÿ™⁄Ø (ŸÖÿßŸÜÿØ⁄Øÿßÿ±)
    if q.data.startswith("ui:tag:"):
        kind = q.data.split(":")[2]
        if not q.message or not q.message.reply_to_message:
            await q.answer("ÿ®ÿ±ÿß€å ÿ™⁄Øÿå ÿ±Ÿà€å Ÿæ€åÿßŸÖ ŸáÿØŸÅ ÿ±€åŸæŸÑÿß€å ⁄©ŸÜ Ÿà ÿØŸàÿ®ÿßÿ±Ÿá ÿ®ÿ≤ŸÜ.", show_alert=True); return
        reply_to = q.message.reply_to_message.message_id
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            if kind=="girls":
                users = s.query(User).filter_by(chat_id=g.id, gender="female").all()
            elif kind=="boys":
                users = s.query(User).filter_by(chat_id=g.id, gender="male").all()
            else:
                users = s.query(User).filter_by(chat_id=g.id).all()
        if not users: await q.answer("⁄©ÿ≥€å ÿ®ÿ±ÿß€å ÿ™⁄Ø ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™.", show_alert=True); return
        mentions = [mention_of(u) for u in users]
        for pack in chunked(mentions, 4):
            try:
                await q.bot.send_message(q.message.chat.id, " ".join(pack),
                                         reply_to_message_id=reply_to,
                                         parse_mode=ParseMode.HTML,
                                         disable_web_page_preview=True)
                await asyncio.sleep(0.8)
            except Exception as e:
                logging.info(f"Tag batch send failed: {e}")
        return

    # Ÿæÿ±ÿß€åŸàÿ≥€å
    if q.data == "ui:privacy:me":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            u = s.execute(select(User).where(User.chat_id==g.id, User.tg_user_id==q.from_user.id)).scalar_one_or_none()
        if not u:
            await q.answer("⁄Ü€åÿ≤€å ÿ∞ÿÆ€åÿ±Ÿá ŸÜÿ¥ÿØŸá.", show_alert=True); return
        txt = f"üë§ ŸÜÿßŸÖ: {u.first_name or ''} @{u.username or ''}\nÿ¨ŸÜÿ≥€åÿ™: {u.gender}\nÿ™ŸàŸÑÿØ (ÿ¥ŸÖÿ≥€å): {fmt_date_fa(u.birthday)}"
        await q.message.chat.send_message(txt)
        return

    if q.data == "ui:privacy:delme":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
            u = s.execute(select(User).where(User.chat_id==g.id, User.tg_user_id==q.from_user.id)).scalar_one_or_none()
            if not u:
                await q.answer("⁄Ü€åÿ≤€å ÿ®ÿ±ÿß€å ÿ≠ÿ∞ŸÅ ŸÜ€åÿ≥ÿ™.", show_alert=True); return
            s.execute(Crush.__table__.delete().where((Crush.chat_id==g.id) & ((Crush.from_user_id==u.id) | (Crush.to_user_id==u.id))))
            s.execute(Relationship.__table__.delete().where((Relationship.chat_id==g.id) & ((Relationship.user_a_id==u.id) | (Relationship.user_b_id==u.id))))
            s.execute(ReplyStatDaily.__table__.delete().where((ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.target_user_id==u.id)))
            s.execute(User.__table__.delete().where((User.chat_id==g.id) & (User.id==u.id)))
            s.commit()
        await q.answer("‚úÖ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.", show_alert=True); return

    # ÿ™ÿß€åŸÖ‚Äåÿ≤ŸàŸÜ
    if q.data == "tz:menu":
        with SessionLocal() as s:
            if not is_group_admin(s, q.message.chat.id, q.from_user.id):
                await q.answer("ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÜÿØÿßÿ±€å.", show_alert=True); return
        kb = [
            [InlineKeyboardButton("Asia/Tehran", callback_data="tz:set:Asia/Tehran"),
             InlineKeyboardButton("Europe/Istanbul", callback_data="tz:set:Europe/Istanbul")],
            [InlineKeyboardButton("UTC", callback_data="tz:set:UTC")]
        ]
        await open_panel_from_cb(q.message, q.from_user.id, context, "ÿ™ÿß€åŸÖ‚Äåÿ≤ŸàŸÜ ⁄Øÿ±ŸàŸá ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", kb, root=False)
        return

    if q.data.startswith("tz:set:"):
        tzname = q.data.split(":",2)[2]
        try: ZoneInfo(tzname)
        except Exception: await q.answer("TZ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±.", show_alert=True); return
        with SessionLocal() as s:
            if not is_group_admin(s, q.message.chat.id, q.from_user.id):
                await q.answer("ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÜÿØÿßÿ±€å.", show_alert=True); return
            g = ensure_group(s, q.message.chat)
            g.timezone = tzname; s.commit()
        await q.answer(f"ÿ™ÿß€åŸÖ‚Äåÿ≤ŸàŸÜ = {tzname}", show_alert=True); return

    if q.data == "ui:expiry":
        with SessionLocal() as s:
            g = ensure_group(s, q.message.chat)
        await q.answer(f"ÿßŸÜŸÇÿ∂ÿß: {fmt_dt_fa(g.expires_at, g.timezone) if g.expires_at else 'ŸÜÿßŸÖÿ¥ÿÆÿµ'}", show_alert=True); return

    # Ÿæÿß⁄©ÿ≥ÿßÿ≤€å ⁄Øÿ±ŸàŸá
    if q.data.startswith("wipe:"):
        chat_id = int(q.data.split(":")[1])
        with SessionLocal() as s:
            if not is_group_admin(s, chat_id, q.from_user.id):
                await q.answer("ŸÅŸÇÿ∑ ŸÖÿØ€åÿ± ⁄Øÿ±ŸàŸá/ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá/ŸÖÿßŸÑ⁄©.", show_alert=True); return
            s.execute(Crush.__table__.delete().where(Crush.chat_id==chat_id))
            s.execute(Relationship.__table__.delete().where(Relationship.chat_id==chat_id))
            s.execute(ReplyStatDaily.__table__.delete().where(ReplyStatDaily.chat_id==chat_id))
            s.execute(ShipHistory.__table__.delete().where(ShipHistory.chat_id==chat_id))
            s.execute(GroupAdmin.__table__.delete().where(GroupAdmin.chat_id==chat_id))
            s.execute(User.__table__.delete().where(User.chat_id==chat_id))
            s.commit()
        await q.message.chat.send_message(footer("üßπ ⁄©ŸÑ ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿß€åŸÜ ⁄Øÿ±ŸàŸá Ÿæÿß⁄© ÿ¥ÿØ."))
        return

    if q.data == "noop":
        await q.answer("ŸÑÿ∫Ÿà ÿ¥ÿØ", show_alert=False); return

# ================== INSTALL/UNINSTALL REPORTS ==================
async def on_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.my_chat_member: return
    chat = update.my_chat_member.chat
    new_status = update.my_chat_member.new_chat_member.status
    old_status = update.my_chat_member.old_chat_member.status
    if chat.type in ("group","supergroup"):
        with SessionLocal() as s:
            if new_status in ("member","administrator"):
                ensure_group(s, chat)
                try_send_owner(f"‚ûï ÿ±ÿ®ÿßÿ™ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ ÿ®Ÿá ⁄Øÿ±ŸàŸá:\n‚Ä¢ {chat.title}\n‚Ä¢ chat_id: {chat.id}")
            elif new_status in ("left","kicked") and old_status in ("member","administrator"):
                try_send_owner(f"‚ûñ ÿ±ÿ®ÿßÿ™ ÿßÿ≤ ⁄Øÿ±ŸàŸá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ:\n‚Ä¢ {chat.title}\n‚Ä¢ chat_id: {chat.id}")

# ================== JOBS ==================
async def job_midnight(context: ContextTypes.DEFAULT_TYPE):
    with SessionLocal() as s:
        groups = s.query(Group).all()
        for g in groups:
            if not group_active(g): continue
            tz = ZoneInfo(g.timezone or DEFAULT_TZ); today = dt.datetime.now(tz).date()
            top = s.execute(select(ReplyStatDaily).where(
                (ReplyStatDaily.chat_id==g.id) & (ReplyStatDaily.date==today)
            ).order_by(ReplyStatDaily.reply_count.desc()).limit(3)).scalars().all()
            if top:
                lines=[]
                for i,r in enumerate(top, start=1):
                    u = s.get(User, r.target_user_id)
                    name = u.first_name or (u.username and f"@{u.username}") or str(u.tg_user_id)
                    lines.append(f"{fa_digits(i)}) {name} ‚Äî {fa_digits(r.reply_count)} ÿ±€åŸæŸÑÿß€å")
                try:
                    await context.bot.send_message(g.id, footer("üåô ŸÖÿ≠ÿ®Ÿàÿ®‚ÄåŸáÿß€å ÿßŸÖÿ±Ÿàÿ≤:\n" + "\n".join(lines)))
                except: ...
            # ÿ¥€åŸæ ŸÅŸÇÿ∑ ÿ®€åŸÜ ŸÖÿ¨ÿ±ÿØŸáÿß
            males = s.query(User).filter_by(chat_id=g.id, gender="male").all()
            females = s.query(User).filter_by(chat_id=g.id, gender="female").all()
            rels = s.query(Relationship).filter_by(chat_id=g.id).all()
            in_rel = set([r.user_a_id for r in rels] + [r.user_b_id for r in rels])
            males = [u for u in males if u.id not in in_rel]
            females = [u for u in females if u.id not in in_rel]
            if males and females:
                m = random.choice(males); f = random.choice(females)
                s.add(ShipHistory(chat_id=g.id, date=today, male_user_id=m.id, female_user_id=f.id)); s.commit()
                try:
                    await context.bot.send_message(g.id, footer(
                        f"üíò ÿ¥€åŸæŸê ÿßŸÖÿ¥ÿ®: {(m.first_name or '@'+(m.username or ''))} √ó {(f.first_name or '@'+(f.username or ''))}"
                    ))
                except: ...

async def job_morning(context: ContextTypes.DEFAULT_TYPE):
    with SessionLocal() as s:
        groups = s.query(Group).all()
        for g in groups:
            if not group_active(g): continue
            tz = ZoneInfo(g.timezone or DEFAULT_TZ)
            jy, jm, jd = today_jalali(tz)
            # ÿ™ŸàŸÑÿØŸáÿß (ÿ¨ŸÑÿßŸÑ€å)
            bdays = s.query(User).filter_by(chat_id=g.id).filter(User.birthday.isnot(None)).all()
            for u in bdays:
                um, ud = to_jalali_md(u.birthday)
                if um==jm and ud==jd:
                    try:
                        await context.bot.send_message(g.id, footer(f"üéâüéÇ ÿ™ŸàŸÑÿØÿ™ ŸÖÿ®ÿßÿ±⁄© {(u.first_name or '@'+(u.username or ''))}! ({fmt_date_fa(u.birthday)})"))
                    except: ...
            # ŸÖÿßŸá⁄Øÿ±ÿØ ÿ±ÿßÿ®ÿ∑Ÿá‚ÄåŸáÿß (ÿ¨ŸÑÿßŸÑ€å: ÿ±Ÿàÿ≤Ÿê ÿ¥ÿ±Ÿàÿπ Ÿáÿ± ŸÖÿßŸá)
            rels = s.query(Relationship).filter_by(chat_id=g.id).all()
            for r in rels:
                if not r.started_at: continue
                rm, rd = to_jalali_md(r.started_at)
                if rd==jd:
                    ua, ub = s.get(User, r.user_a_id), s.get(User, r.user_b_id)
                    try:
                        await context.bot.send_message(
                            g.id, footer(f"üíû ŸÖÿßŸá⁄Øÿ±ÿØ {(ua.first_name or '@'+(ua.username or ''))} Ÿà {(ub.first_name or '@'+(ub.username or ''))} ŸÖÿ®ÿßÿ±⁄©! ({fmt_date_fa(r.started_at)})")
                        )
                    except: ...

# ================== ERROR HANDLER ==================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    err = context.error
    if isinstance(err, TgConflict):
        try:
            if OWNER_ID:
                await context.bot.send_message(OWNER_ID, "‚ö†Ô∏è Conflict 409: ŸÜŸÖŸàŸÜŸáŸî ÿØ€å⁄Øÿ±€å ÿßÿ≤ ÿ±ÿ®ÿßÿ™ ÿØÿ± ÿ≠ÿßŸÑ polling ÿßÿ≥ÿ™. ÿß€åŸÜ ŸÜŸÖŸàŸÜŸá ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ.")
        except Exception: ...
        logging.error("Conflict 409 detected. Exiting this instance to avoid duplicate polling.")
        os._exit(0)
    logging.exception("Unhandled error", exc_info=err)

# ================== BOOT ==================
async def _post_init(app: Application):
    try:
        info = await app.bot.get_webhook_info()
        if WEBHOOK_URL:
            logging.info("Webhook mode enabled; leaving webhook to PTB in run_webhook.")
        else:
            if info.url:
                logging.info(f"Webhook was set to: {info.url} ‚Äî deleting‚Ä¶")
            await app.bot.delete_webhook(drop_pending_updates=True)
            logging.info("Webhook deleted. Polling will receive ALL updates.")
    except Exception as e:
        logging.warning(f"post_init webhook check failed: {e}")
    logging.info(f"PersianTools enabled: {HAS_PTOOLS}")

def main():
    if not TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN env var is required.")

    acquire_singleton_or_exit()

    app = Application.builder().token(TOKEN).post_init(_post_init).build()

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND, on_group_text))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, on_private_text))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(ChatMemberHandler(on_my_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_error_handler(error_handler)

    jq = app.job_queue
    if jq is None:
        logging.warning('JobQueue ŸÅÿπÿßŸÑ ŸÜ€åÿ≥ÿ™. ŸÜÿµÿ® ⁄©ŸÜ: pip install "python-telegram-bot[job-queue]==21.6"')
    else:
        jq.run_daily(job_morning, time=dt.time(6,0,0))   # 6 UTC
        jq.run_daily(job_midnight, time=dt.time(21,0,0)) # 21 UTC ~ ÿ¢ÿÆÿ± ÿ¥ÿ® ÿß€åÿ±ÿßŸÜ

    logging.info("FazolBot running‚Ä¶")
    allowed = ["message","edited_message","callback_query","my_chat_member","chat_member","chat_join_request"]
    if WEBHOOK_URL:
        app.run_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN, webhook_url=f"{WEBHOOK_URL}/{TOKEN}",
                        allowed_updates=allowed, drop_pending_updates=True)
    else:
        app.run_polling(allowed_updates=allowed, drop_pending_updates=True)

if __name__ == "__main__":
    main()
